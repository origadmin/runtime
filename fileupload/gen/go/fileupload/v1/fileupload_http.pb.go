// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             (unknown)
// source: fileupload/v1/fileupload.proto

package fileuploadv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFileUploadServiceCreateUploadTask = "/fileupload.v1.FileUploadService/CreateUploadTask"
const OperationFileUploadServiceFinalizeUpload = "/fileupload.v1.FileUploadService/FinalizeUpload"

type FileUploadServiceHTTPServer interface {
	CreateUploadTask(context.Context, *CreateUploadTaskRequest) (*CreateUploadTaskResponse, error)
	FinalizeUpload(context.Context, *FinalizeUploadRequest) (*UploadResponse, error)
}

func RegisterFileUploadServiceHTTPServer(s *http.Server, srv FileUploadServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/upload/create", _FileUploadService_CreateUploadTask0_HTTP_Handler(srv))
	r.POST("/upload/{task_id}/finalize", _FileUploadService_FinalizeUpload0_HTTP_Handler(srv))
}

func _FileUploadService_CreateUploadTask0_HTTP_Handler(srv FileUploadServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUploadTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileUploadServiceCreateUploadTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUploadTask(ctx, req.(*CreateUploadTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUploadTaskResponse)
		return ctx.Result(200, reply)
	}
}

func _FileUploadService_FinalizeUpload0_HTTP_Handler(srv FileUploadServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FinalizeUploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileUploadServiceFinalizeUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FinalizeUpload(ctx, req.(*FinalizeUploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadResponse)
		return ctx.Result(200, reply)
	}
}

type FileUploadServiceHTTPClient interface {
	CreateUploadTask(ctx context.Context, req *CreateUploadTaskRequest, opts ...http.CallOption) (rsp *CreateUploadTaskResponse, err error)
	FinalizeUpload(ctx context.Context, req *FinalizeUploadRequest, opts ...http.CallOption) (rsp *UploadResponse, err error)
}

type FileUploadServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFileUploadServiceHTTPClient(client *http.Client) FileUploadServiceHTTPClient {
	return &FileUploadServiceHTTPClientImpl{client}
}

func (c *FileUploadServiceHTTPClientImpl) CreateUploadTask(ctx context.Context, in *CreateUploadTaskRequest, opts ...http.CallOption) (*CreateUploadTaskResponse, error) {
	var out CreateUploadTaskResponse
	pattern := "/upload/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFileUploadServiceCreateUploadTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FileUploadServiceHTTPClientImpl) FinalizeUpload(ctx context.Context, in *FinalizeUploadRequest, opts ...http.CallOption) (*UploadResponse, error) {
	var out UploadResponse
	pattern := "/upload/{task_id}/finalize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFileUploadServiceFinalizeUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
