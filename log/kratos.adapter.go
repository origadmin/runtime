// Code generated by adptool. DO NOT EDIT.
//
// This file is generated from kratos.go.

// Package log contains generated code by adptool.
package log

import (
	"context"
	"io"

	kratoslog "github.com/go-kratos/kratos/v2/log"
)

const (
	LevelDebug = kratoslog.LevelDebug
	LevelError = kratoslog.LevelError
	LevelFatal = kratoslog.LevelFatal
	LevelInfo  = kratoslog.LevelInfo
	LevelKey   = kratoslog.LevelKey
	LevelWarn  = kratoslog.LevelWarn
)

var (
	DefaultCaller     = kratoslog.DefaultCaller
	DefaultLogger     = kratoslog.DefaultLogger
	DefaultMessageKey = kratoslog.DefaultMessageKey
	DefaultTimestamp  = kratoslog.DefaultTimestamp
)

type (
	Filter         = kratoslog.Filter
	FilterOption   = kratoslog.FilterOption
	Helper         = kratoslog.Helper
	Level          = kratoslog.Level
	Logger         = kratoslog.Logger
	Option         = kratoslog.Option
	Valuer         = kratoslog.Valuer
	WriterOptionFn = kratoslog.WriterOptionFn
)

func Caller(depth int) kratoslog.Valuer {
	return kratoslog.Caller(depth)
}

func Context(ctx context.Context) *kratoslog.Helper {
	return kratoslog.Context(ctx)
}

func Debug(a ...any) {
	kratoslog.Debug(a...)
}

func Debugf(format string, a ...any) {
	kratoslog.Debugf(format, a...)
}

func Debugw(keyvals ...any) {
	kratoslog.Debugw(keyvals...)
}

func Error(a ...any) {
	kratoslog.Error(a...)
}

func Errorf(format string, a ...any) {
	kratoslog.Errorf(format, a...)
}

func Errorw(keyvals ...any) {
	kratoslog.Errorw(keyvals...)
}

func Fatal(a ...any) {
	kratoslog.Fatal(a...)
}

func Fatalf(format string, a ...any) {
	kratoslog.Fatalf(format, a...)
}

func Fatalw(keyvals ...any) {
	kratoslog.Fatalw(keyvals...)
}

func FilterFunc(f func(level kratoslog.Level, keyvals ...any) bool) kratoslog.FilterOption {
	return kratoslog.FilterFunc(f)
}

func FilterKey(key ...string) kratoslog.FilterOption {
	return kratoslog.FilterKey(key...)
}

func FilterLevel(level kratoslog.Level) kratoslog.FilterOption {
	return kratoslog.FilterLevel(level)
}

func FilterValue(value ...string) kratoslog.FilterOption {
	return kratoslog.FilterValue(value...)
}

func GetLogger() kratoslog.Logger {
	return kratoslog.GetLogger()
}

func Info(a ...any) {
	kratoslog.Info(a...)
}

func Infof(format string, a ...any) {
	kratoslog.Infof(format, a...)
}

func Infow(keyvals ...any) {
	kratoslog.Infow(keyvals...)
}

func Log(level kratoslog.Level, keyvals ...any) {
	kratoslog.Log(level, keyvals...)
}

func NewFilter(logger kratoslog.Logger, opts ...kratoslog.FilterOption) *kratoslog.Filter {
	return kratoslog.NewFilter(logger, opts...)
}

func NewHelper(logger kratoslog.Logger, opts ...kratoslog.Option) *kratoslog.Helper {
	return kratoslog.NewHelper(logger, opts...)
}

func NewStdLogger(w io.Writer) kratoslog.Logger {
	return kratoslog.NewStdLogger(w)
}

func NewWriter(logger kratoslog.Logger, opts ...kratoslog.WriterOptionFn) io.Writer {
	return kratoslog.NewWriter(logger, opts...)
}

func ParseLevel(s string) kratoslog.Level {
	return kratoslog.ParseLevel(s)
}

func SetLogger(logger kratoslog.Logger) {
	kratoslog.SetLogger(logger)
}

func Timestamp(layout string) kratoslog.Valuer {
	return kratoslog.Timestamp(layout)
}

func Value(ctx context.Context, v any) any {
	return kratoslog.Value(ctx, v)
}

func Warn(a ...any) {
	kratoslog.Warn(a...)
}

func Warnf(format string, a ...any) {
	kratoslog.Warnf(format, a...)
}

func Warnw(keyvals ...any) {
	kratoslog.Warnw(keyvals...)
}

func With(l kratoslog.Logger, kv ...any) kratoslog.Logger {
	return kratoslog.With(l, kv...)
}

func WithContext(ctx context.Context, l kratoslog.Logger) kratoslog.Logger {
	return kratoslog.WithContext(ctx, l)
}

func WithMessageKey(k string) kratoslog.Option {
	return kratoslog.WithMessageKey(k)
}

func WithSprint(sprint func(...any) string) kratoslog.Option {
	return kratoslog.WithSprint(sprint)
}

func WithSprintf(sprintf func(format string, a ...any) string) kratoslog.Option {
	return kratoslog.WithSprintf(sprintf)
}

func WithWriteMessageKey(key string) kratoslog.WriterOptionFn {
	return kratoslog.WithWriteMessageKey(key)
}

func WithWriterLevel(level kratoslog.Level) kratoslog.WriterOptionFn {
	return kratoslog.WithWriterLevel(level)
}
