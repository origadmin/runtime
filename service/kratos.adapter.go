// Code generated by adptool. DO NOT EDIT.
//
// This file is generated from kratos.go.

// Package service contains generated code by adptool.
package service

import (
	"context"
	"crypto/tls"
	"net"
	"net/http"
	"net/url"
	"time"

	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/middleware"
	"github.com/go-kratos/kratos/v2/registry"
	"github.com/go-kratos/kratos/v2/selector"
	transgrpc "github.com/go-kratos/kratos/v2/transport/grpc"
	transhttp "github.com/go-kratos/kratos/v2/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/encoding"
)

const SupportPackageIsVersion1 = transhttp.SupportPackageIsVersion1

type (
	ClientOptionGRPC           = transgrpc.ClientOption
	ServerGRPC                 = transgrpc.Server
	ServerOptionGRPC           = transgrpc.ServerOption
	TrailerGRPC                = transgrpc.Trailer
	TransportGRPC              = transgrpc.Transport
	CallOptionHTTP             = transhttp.CallOption
	ClientHTTP                 = transhttp.Client
	ClientOptionHTTP           = transhttp.ClientOption
	ContentTypeCallOptionHTTP  = transhttp.ContentTypeCallOption
	ContextHTTP                = transhttp.Context
	DecodeErrorFuncHTTP        = transhttp.DecodeErrorFunc
	DecodeRequestFuncHTTP      = transhttp.DecodeRequestFunc
	DecodeResponseFuncHTTP     = transhttp.DecodeResponseFunc
	EmptyCallOptionHTTP        = transhttp.EmptyCallOption
	EncodeErrorFuncHTTP        = transhttp.EncodeErrorFunc
	EncodeRequestFuncHTTP      = transhttp.EncodeRequestFunc
	EncodeResponseFuncHTTP     = transhttp.EncodeResponseFunc
	FilterFuncHTTP             = transhttp.FilterFunc
	FlusherHTTP                = transhttp.Flusher
	HandlerFuncHTTP            = transhttp.HandlerFunc
	HeaderCallOptionHTTP       = transhttp.HeaderCallOption
	OperationCallOptionHTTP    = transhttp.OperationCallOption
	PathTemplateCallOptionHTTP = transhttp.PathTemplateCallOption
	RedirectorHTTP             = transhttp.Redirector
	RequestHTTP                = transhttp.Request
	ResponseControllerHTTP     = transhttp.ResponseController
	ResponseWriterHTTP         = transhttp.ResponseWriter
	RouteInfoHTTP              = transhttp.RouteInfo
	RouterHTTP                 = transhttp.Router
	ServerHTTP                 = transhttp.Server
	ServerOptionHTTP           = transhttp.ServerOption
	TargetHTTP                 = transhttp.Target
	TransportHTTP              = transhttp.Transport
	TransporterHTTP            = transhttp.Transporter
	WalkRouteFuncHTTP          = transhttp.WalkRouteFunc
)

func AddressGRPC(addr string) transgrpc.ServerOption {
	return transgrpc.Address(addr)
}

func CustomHealthGRPC() transgrpc.ServerOption {
	return transgrpc.CustomHealth()
}

func DialGRPC(ctx context.Context, opts ...transgrpc.ClientOption) (*grpc.ClientConn, error) {
	return transgrpc.Dial(ctx, opts...)
}

func DialInsecureGRPC(ctx context.Context, opts ...transgrpc.ClientOption) (*grpc.ClientConn, error) {
	return transgrpc.DialInsecure(ctx, opts...)
}

func DisableReflectionGRPC() transgrpc.ServerOption {
	return transgrpc.DisableReflection()
}

func EndpointGRPC(endpoint *url.URL) transgrpc.ServerOption {
	return transgrpc.Endpoint(endpoint)
}

func GetStreamGRPC(ctx context.Context) grpc.ServerStream {
	return transgrpc.GetStream(ctx)
}

func ListenerGRPC(lis net.Listener) transgrpc.ServerOption {
	return transgrpc.Listener(lis)
}

func LoggerGRPC(p0 log.Logger) transgrpc.ServerOption {
	return transgrpc.Logger(p0)
}

func MiddlewareGRPC(m ...middleware.Middleware) transgrpc.ServerOption {
	return transgrpc.Middleware(m...)
}

func NetworkGRPC(network string) transgrpc.ServerOption {
	return transgrpc.Network(network)
}

func NewServerGRPC(opts ...transgrpc.ServerOption) *transgrpc.Server {
	return transgrpc.NewServer(opts...)
}

func OptionsGRPC(opts ...grpc.ServerOption) transgrpc.ServerOption {
	return transgrpc.Options(opts...)
}

func StreamInterceptorGRPC(in ...grpc.StreamServerInterceptor) transgrpc.ServerOption {
	return transgrpc.StreamInterceptor(in...)
}

func StreamMiddlewareGRPC(m ...middleware.Middleware) transgrpc.ServerOption {
	return transgrpc.StreamMiddleware(m...)
}

func TLSConfigGRPC(c *tls.Config) transgrpc.ServerOption {
	return transgrpc.TLSConfig(c)
}

func TimeoutGRPC(timeout time.Duration) transgrpc.ServerOption {
	return transgrpc.Timeout(timeout)
}

func UnaryInterceptorGRPC(in ...grpc.UnaryServerInterceptor) transgrpc.ServerOption {
	return transgrpc.UnaryInterceptor(in...)
}

func WithDiscoveryGRPC(d registry.Discovery) transgrpc.ClientOption {
	return transgrpc.WithDiscovery(d)
}

func WithEndpointGRPC(endpoint string) transgrpc.ClientOption {
	return transgrpc.WithEndpoint(endpoint)
}

func WithHealthCheckGRPC(healthCheck bool) transgrpc.ClientOption {
	return transgrpc.WithHealthCheck(healthCheck)
}

func WithLoggerGRPC(p0 log.Logger) transgrpc.ClientOption {
	return transgrpc.WithLogger(p0)
}

func WithMiddlewareGRPC(m ...middleware.Middleware) transgrpc.ClientOption {
	return transgrpc.WithMiddleware(m...)
}

func WithNodeFilterGRPC(filters ...selector.NodeFilter) transgrpc.ClientOption {
	return transgrpc.WithNodeFilter(filters...)
}

func WithOptionsGRPC(opts ...grpc.DialOption) transgrpc.ClientOption {
	return transgrpc.WithOptions(opts...)
}

func WithPrintDiscoveryDebugLogGRPC(p bool) transgrpc.ClientOption {
	return transgrpc.WithPrintDiscoveryDebugLog(p)
}

func WithStreamInterceptorGRPC(in ...grpc.StreamClientInterceptor) transgrpc.ClientOption {
	return transgrpc.WithStreamInterceptor(in...)
}

func WithSubsetGRPC(size int) transgrpc.ClientOption {
	return transgrpc.WithSubset(size)
}

func WithTLSConfigGRPC(c *tls.Config) transgrpc.ClientOption {
	return transgrpc.WithTLSConfig(c)
}

func WithTimeoutGRPC(timeout time.Duration) transgrpc.ClientOption {
	return transgrpc.WithTimeout(timeout)
}

func WithUnaryInterceptorGRPC(in ...grpc.UnaryClientInterceptor) transgrpc.ClientOption {
	return transgrpc.WithUnaryInterceptor(in...)
}

func AddressHTTP(addr string) transhttp.ServerOption {
	return transhttp.Address(addr)
}

func CodecForRequestHTTP(r *http.Request, name string) (encoding.Codec, bool) {
	return transhttp.CodecForRequest(r, name)
}

func CodecForResponseHTTP(r *http.Response) encoding.Codec {
	return transhttp.CodecForResponse(r)
}

func ContentTypeHTTP(contentType string) transhttp.CallOption {
	return transhttp.ContentType(contentType)
}

func DefaultErrorDecoderHTTP(p0 context.Context, res *http.Response) error {
	return transhttp.DefaultErrorDecoder(p0, res)
}

func DefaultErrorEncoderHTTP(w http.ResponseWriter, r *http.Request, err error) {
	transhttp.DefaultErrorEncoder(w, r, err)
}

func DefaultRequestDecoderHTTP(r *http.Request, v any) error {
	return transhttp.DefaultRequestDecoder(r, v)
}

func DefaultRequestEncoderHTTP(p0 context.Context, contentType string, in any) ([]byte, error) {
	return transhttp.DefaultRequestEncoder(p0, contentType, in)
}

func DefaultRequestQueryHTTP(r *http.Request, v any) error {
	return transhttp.DefaultRequestQuery(r, v)
}

func DefaultRequestVarsHTTP(r *http.Request, v any) error {
	return transhttp.DefaultRequestVars(r, v)
}

func DefaultResponseDecoderHTTP(p0 context.Context, res *http.Response, v any) error {
	return transhttp.DefaultResponseDecoder(p0, res, v)
}

func DefaultResponseEncoderHTTP(w http.ResponseWriter, r *http.Request, v any) error {
	return transhttp.DefaultResponseEncoder(w, r, v)
}

func EndpointHTTP(endpoint *url.URL) transhttp.ServerOption {
	return transhttp.Endpoint(endpoint)
}

func ErrorEncoderHTTP(en transhttp.EncodeErrorFunc) transhttp.ServerOption {
	return transhttp.ErrorEncoder(en)
}

func FilterChainHTTP(filters ...transhttp.FilterFunc) transhttp.FilterFunc {
	return transhttp.FilterChain(filters...)
}

func FilterHTTP(filters ...transhttp.FilterFunc) transhttp.ServerOption {
	return transhttp.Filter(filters...)
}

func HeaderHTTP(header *http.Header) transhttp.CallOption {
	return transhttp.Header(header)
}

func ListenerHTTP(lis net.Listener) transhttp.ServerOption {
	return transhttp.Listener(lis)
}

func LoggerHTTP(p0 log.Logger) transhttp.ServerOption {
	return transhttp.Logger(p0)
}

func MethodNotAllowedHandlerHTTP(handler http.Handler) transhttp.ServerOption {
	return transhttp.MethodNotAllowedHandler(handler)
}

func MiddlewareHTTP(m ...middleware.Middleware) transhttp.ServerOption {
	return transhttp.Middleware(m...)
}

func NetworkHTTP(network string) transhttp.ServerOption {
	return transhttp.Network(network)
}

func NewClientHTTP(ctx context.Context, opts ...transhttp.ClientOption) (*transhttp.Client, error) {
	return transhttp.NewClient(ctx, opts...)
}

func NewRedirectHTTP(url string, code int) transhttp.Redirector {
	return transhttp.NewRedirect(url, code)
}

func NewServerHTTP(opts ...transhttp.ServerOption) *transhttp.Server {
	return transhttp.NewServer(opts...)
}

func NotFoundHandlerHTTP(handler http.Handler) transhttp.ServerOption {
	return transhttp.NotFoundHandler(handler)
}

func OperationHTTP(operation string) transhttp.CallOption {
	return transhttp.Operation(operation)
}

func PathPrefixHTTP(prefix string) transhttp.ServerOption {
	return transhttp.PathPrefix(prefix)
}

func PathTemplateHTTP(pattern string) transhttp.CallOption {
	return transhttp.PathTemplate(pattern)
}

func RequestDecoderHTTP(dec transhttp.DecodeRequestFunc) transhttp.ServerOption {
	return transhttp.RequestDecoder(dec)
}

func RequestFromServerContextHTTP(ctx context.Context) (*http.Request, bool) {
	return transhttp.RequestFromServerContext(ctx)
}

func RequestQueryDecoderHTTP(dec transhttp.DecodeRequestFunc) transhttp.ServerOption {
	return transhttp.RequestQueryDecoder(dec)
}

func RequestVarsDecoderHTTP(dec transhttp.DecodeRequestFunc) transhttp.ServerOption {
	return transhttp.RequestVarsDecoder(dec)
}

func ResponseEncoderHTTP(en transhttp.EncodeResponseFunc) transhttp.ServerOption {
	return transhttp.ResponseEncoder(en)
}

func SetCookieHTTP(ctx context.Context, cookie *http.Cookie) {
	transhttp.SetCookie(ctx, cookie)
}

func SetOperationHTTP(ctx context.Context, op string) {
	transhttp.SetOperation(ctx, op)
}

func StrictSlashHTTP(strictSlash bool) transhttp.ServerOption {
	return transhttp.StrictSlash(strictSlash)
}

func TLSConfigHTTP(c *tls.Config) transhttp.ServerOption {
	return transhttp.TLSConfig(c)
}

func TimeoutHTTP(timeout time.Duration) transhttp.ServerOption {
	return transhttp.Timeout(timeout)
}

func WithBlockHTTP() transhttp.ClientOption {
	return transhttp.WithBlock()
}

func WithDiscoveryHTTP(d registry.Discovery) transhttp.ClientOption {
	return transhttp.WithDiscovery(d)
}

func WithEndpointHTTP(endpoint string) transhttp.ClientOption {
	return transhttp.WithEndpoint(endpoint)
}

func WithErrorDecoderHTTP(errorDecoder transhttp.DecodeErrorFunc) transhttp.ClientOption {
	return transhttp.WithErrorDecoder(errorDecoder)
}

func WithMiddlewareHTTP(m ...middleware.Middleware) transhttp.ClientOption {
	return transhttp.WithMiddleware(m...)
}

func WithNodeFilterHTTP(filters ...selector.NodeFilter) transhttp.ClientOption {
	return transhttp.WithNodeFilter(filters...)
}

func WithRequestEncoderHTTP(encoder transhttp.EncodeRequestFunc) transhttp.ClientOption {
	return transhttp.WithRequestEncoder(encoder)
}

func WithResponseDecoderHTTP(decoder transhttp.DecodeResponseFunc) transhttp.ClientOption {
	return transhttp.WithResponseDecoder(decoder)
}

func WithSubsetHTTP(size int) transhttp.ClientOption {
	return transhttp.WithSubset(size)
}

func WithTLSConfigHTTP(c *tls.Config) transhttp.ClientOption {
	return transhttp.WithTLSConfig(c)
}

func WithTimeoutHTTP(d time.Duration) transhttp.ClientOption {
	return transhttp.WithTimeout(d)
}

func WithTransportHTTP(trans http.RoundTripper) transhttp.ClientOption {
	return transhttp.WithTransport(trans)
}

func WithUserAgentHTTP(ua string) transhttp.ClientOption {
	return transhttp.WithUserAgent(ua)
}
