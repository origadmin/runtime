// Code generated by adptool. DO NOT EDIT.
//
// This file is generated from kratos.go.

// Package selector contains generated code by adptool.
package selector

import (
	"context"

	"github.com/go-kratos/kratos/v2/registry"
	selector "github.com/go-kratos/kratos/v2/selector"
)

var ErrNoAvailable = selector.ErrNoAvailable

type (
	Balancer            = selector.Balancer
	BalancerBuilder     = selector.BalancerBuilder
	Builder             = selector.Builder
	Default             = selector.Default
	DefaultBuilder      = selector.DefaultBuilder
	DefaultNode         = selector.DefaultNode
	DoneFunc            = selector.DoneFunc
	DoneInfo            = selector.DoneInfo
	Node                = selector.Node
	NodeFilter          = selector.NodeFilter
	Peer                = selector.Peer
	Rebalancer          = selector.Rebalancer
	ReplyMD             = selector.ReplyMD
	SelectOption        = selector.SelectOption
	SelectOptions       = selector.SelectOptions
	Selector            = selector.Selector
	WeightedNode        = selector.WeightedNode
	WeightedNodeBuilder = selector.WeightedNodeBuilder
)

func FromPeerContext(ctx context.Context) (p *selector.Peer, ok bool) {
	return selector.FromPeerContext(ctx)
}

func GlobalSelector() selector.Builder {
	return selector.GlobalSelector()
}

func NewNode(scheme, addr string, ins *registry.ServiceInstance) selector.Node {
	return selector.NewNode(scheme, addr, ins)
}

func NewPeerContext(ctx context.Context, p *selector.Peer) context.Context {
	return selector.NewPeerContext(ctx, p)
}

func SetGlobalSelector(builder selector.Builder) {
	selector.SetGlobalSelector(builder)
}

func WithNodeFilter(fn ...selector.NodeFilter) selector.SelectOption {
	return selector.WithNodeFilter(fn...)
}
