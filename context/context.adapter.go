// Code generated by adptool. DO NOT EDIT.
//
// This file is generated from context.go.

// Package context contains generated code by adptool.
package context

import (
	context "context"
	"time"
)

var (
	Canceled         = context.Canceled
	DeadlineExceeded = context.DeadlineExceeded
)

type (
	CancelCauseFunc = context.CancelCauseFunc
	CancelFunc      = context.CancelFunc
	Context         = context.Context
)

func AfterFunc(ctx context.Context, f func()) (stop func() bool) {
	return context.AfterFunc(ctx, f)
}

func Background() context.Context {
	return context.Background()
}

func Cause(c context.Context) error {
	return context.Cause(c)
}

func TODO() context.Context {
	return context.TODO()
}

func WithCancel(parent context.Context) (ctx context.Context, cancel context.CancelFunc) {
	return context.WithCancel(parent)
}

func WithCancelCause(parent context.Context) (ctx context.Context, cancel context.CancelCauseFunc) {
	return context.WithCancelCause(parent)
}

func WithDeadline(parent context.Context, d time.Time) (context.Context, context.CancelFunc) {
	return context.WithDeadline(parent, d)
}

func WithDeadlineCause(parent context.Context, d time.Time, cause error) (context.Context, context.CancelFunc) {
	return context.WithDeadlineCause(parent, d, cause)
}

func WithTimeout(parent context.Context, timeout time.Duration) (context.Context, context.CancelFunc) {
	return context.WithTimeout(parent, timeout)
}

func WithTimeoutCause(parent context.Context, timeout time.Duration, cause error) (context.Context, context.CancelFunc) {
	return context.WithTimeoutCause(parent, timeout, cause)
}

func WithValue(parent context.Context, key, val any) context.Context {
	return context.WithValue(parent, key, val)
}

func WithoutCancel(parent context.Context) context.Context {
	return context.WithoutCancel(parent)
}
