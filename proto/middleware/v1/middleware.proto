syntax = "proto3";

package middleware.v1;

import "config/v1/security.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "middleware/metrics/v1/metrics.proto";
import "middleware/ratelimiter/v1/ratelimiter.proto";
import "middleware/validator/v1/validator.proto";
import "validate/validate.proto";

option cc_enable_arenas = true;
option go_package = "github.com/origadmin/runtime/gen/go/middleware/v1;middlewarev1";
option java_multiple_files = true;
option java_outer_classname = "MiddlewareProto";
option java_package = "com.github.origadmin.runtime.middleware.v1";
option objc_class_prefix = "OMX";
option php_namespace = "OrigAdmin\\Runtime\\Middleware\\V1";

// UserMetric: used to report user-defined metrics
// Example:
//    request_count := UserMetric {
//      timestamp: 1633072800,
//      name: "request_count",
//      value: 12345,
//      labels: {
//        "service": "api_service",
//        "endpoint": "/users"
//      },
//      unit: "requests",
//      type: COUNTER,
//      description: "Number of requests to the API service",
//      context: "Production environment",
//      metadata: {
//        "region": "us-west-1",
//        "instance_id": "i-0123456789abcdef0"
//      }
//    };
//
//    response_time := UserMetric {
//      timestamp: 1633072800,
//      name: "response_time",
//      value: 0.25,
//      labels: {
//        "service": "api_service",
//        "endpoint": "/users"
//      },
//      unit: "seconds",
//      type: GAUGE,
//      description: "Average response time of the API service",
//      context: "Production environment",
//      metadata: {
//        "region": "us-west-1",
//        "instance_id": "i-0123456789abcdef0"
//      }
//    };

// Middleware middleware is used to middlewareure middleware for entry
message Middleware {
  // Metadata
  message Metadata {
    // Metadata prefix
    string prefix = 1 [json_name = "prefix"];
    // Metadata data
    map<string, string> data = 2 [json_name = "data"];
  }

  // Logging switch
  bool enable_logging = 1;
  // Recovery switch
  bool enable_recovery = 2;
  // Metrics switch
  bool enable_tracing = 3;
  // Validation switch
  bool enable_validate = 4;
  // Circuit breaker switch
  bool enable_circuit_breaker = 5;
  // Metadata switch
  bool enable_metadata = 6;

  middleware.ratelimiter.v1.RateLimiter rate_limiter = 100 [json_name = "rate_limiter"];
  Metadata metadata = 101 [json_name = "metadata"];

  middleware.metrics.v1.Metrics metrics = 200 [json_name = "metrics"];
  middleware.validator.v1.Validator validator = 201 [json_name = "validator"];
}
