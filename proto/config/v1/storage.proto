syntax = "proto3";

package config.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";

option cc_enable_arenas = true;
option go_package = "github.com/origadmin/runtime/gen/go/config/v1;configv1";
option java_multiple_files = true;
option java_outer_classname = "StorageConfigProto";
option java_package = "com.github.origadmin.runtime.config.v1";
option objc_class_prefix = "ORC";

message Migration {
  bool enabled = 1 [
    json_name = "enabled",
    (gnostic.openapi.v3.property) = {description: "whether to enable migration"}
  ];
  string path = 2 [
    json_name = "path",
    (gnostic.openapi.v3.property) = {description: "migration path"}
  ];
  repeated string names = 3 [
    json_name = "names",
    (gnostic.openapi.v3.property) = {description: "migration name"}
  ];
  string version = 4 [
    json_name = "version",
    (gnostic.openapi.v3.property) = {description: "migration version"}
  ];
  string mode = 5 [
    json_name = "mode",
    (gnostic.openapi.v3.property) = {description: "migration mode"}
  ];
}

// Database
message Database {
  // Debugging
  bool debug = 1 [
    json_name = "debug",
    (gnostic.openapi.v3.property) = {description: "whether to enable debug mode "}
  ];
  // Dialect name: mysql, postgresql, mongodb, sqlite......
  string dialect = 2 [
    json_name = "dialect",
    (validate.rules).string = {
      in: [
        "mssql",
        "mysql",
        "postgresql",
        "mongodb",
        "sqlite",
        "oracle",
        "sqlserver",
        "sqlite3"
      ]
    },
    (gnostic.openapi.v3.property) = {description: "database driver name"}
  ];
  // Data source (DSN string)
  string source = 3 [
    json_name = "source",
    (gnostic.openapi.v3.property) = {description: "data source dsn string"}
  ];
  // Data migration
  Migration migration = 10 [
    json_name = "migration",
    (gnostic.openapi.v3.property) = {description: "data migration"}
  ];
  // Link tracking switch
  bool enable_trace = 12 [
    json_name = "enable_trace",
    (gnostic.openapi.v3.property) = {description: "link tracking switch"}
  ];
  // Performance analysis switch
  bool enable_metrics = 13 [
    json_name = "enable_metrics",
    (gnostic.openapi.v3.property) = {description: "performance analysis switch"}
  ];
  // Maximum number of free connections in the connection pool
  int32 max_idle_connections = 20 [
    json_name = "max_idle_connections",
    (gnostic.openapi.v3.property) = {description: "The maximum number of free connections in the connection pool"}
  ];
  // Maximum number of open connections in the connection pool
  int32 max_open_connections = 21 [
    json_name = "max_open_connections",
    (gnostic.openapi.v3.property) = {description: "The maximum number of open connections in the connection pool"}
  ];
  // Maximum length of time that the connection can be reused
  int64 connection_max_lifetime = 22 [
    json_name = "connection_max_lifetime",
    (gnostic.openapi.v3.property) = {description: "The maximum length of time a connection can be reused"}
  ];
  // Maximum number of connections in the connection pool for reading
  int64 connection_max_idle_time = 23 [
    json_name = "connection_max_idle_time",
    (gnostic.openapi.v3.property) = {description: "The maximum number of connections in the connection pool for reading"}
  ];
}

// Redis
message Redis {
  string network = 1 [
    json_name = "network",
    (gnostic.openapi.v3.property) = {description: "network type"}
  ];
  string addr = 2 [
    json_name = "addr",
    (gnostic.openapi.v3.property) = {description: "address"}
  ];
  string password = 3 [
    json_name = "password",
    (gnostic.openapi.v3.property) = {description: "cipher"}
  ];
  int32 db = 4 [
    json_name = "db",
    (gnostic.openapi.v3.property) = {description: "database index"}
  ];
  int64 dial_timeout = 5 [
    json_name = "dial_timeout",
    (validate.rules).int64.gte = 0,
    (gnostic.openapi.v3.property) = {description: "dial timeout"}
  ];
  int64 read_timeout = 6 [
    json_name = "read_timeout",
    (validate.rules).int64.gte = 0,
    (gnostic.openapi.v3.property) = {description: "read timeout"}
  ];
  int64 write_timeout = 7 [
    json_name = "write_timeout",
    (validate.rules).int64.gte = 0,
    (gnostic.openapi.v3.property) = {description: "write timeout"}
  ];
}

// Memcached
message Memcached {
  string addr = 1 [
    json_name = "addr",
    (gnostic.openapi.v3.property) = {description: "address"}
  ];
  string username = 2 [
    json_name = "username",
    (gnostic.openapi.v3.property) = {description: "username"}
  ];
  string password = 3 [
    json_name = "password",
    (gnostic.openapi.v3.property) = {description: "cipher"}
  ];
  int32 max_idle = 4 [
    json_name = "max_idle",
    (gnostic.openapi.v3.property) = {
      description: "maximum number of idle connections"
      minimum: 1
    }
  ];
  int64 timeout = 5 [
    json_name = "timeout",
    (validate.rules).int64.gte = 0,
    (gnostic.openapi.v3.property) = {description: "overtime"}
  ];
}

// Memory
message Memory {
  int32 size = 1 [
    json_name = "size",
    (gnostic.openapi.v3.property) = {description: "size"}
  ];
  int32 capacity = 2 [
    json_name = "capacity",
    (gnostic.openapi.v3.property) = {description: "capacity"}
  ];
  int64 expiration = 3 [
    json_name = "expiration",
    (gnostic.openapi.v3.property) = {description: "expiration time"}
  ];
  int64 cleanup_interval = 4 [
    json_name = "cleanup_interval",
    (gnostic.openapi.v3.property) = {description: "clearance interval"}
  ];
}

message BadgerDS {
  string path = 1 [
    json_name = "path",
    (gnostic.openapi.v3.property) = {description: "path"}
  ];
  bool sync_writes = 2 [
    json_name = "sync_writes",
    (gnostic.openapi.v3.property) = {description: "synchronous write or not"}
  ];
  int32 value_log_file_size = 3 [
    json_name = "value_log_file_size",
    (gnostic.openapi.v3.property) = {description: "value log file size"}
  ];
  bool in_memory = 4 [
    json_name = "in_memory",
    (gnostic.openapi.v3.property) = {description: "in memory or not"}
  ];
  uint32 log_level = 5 [
    json_name = "log_level",
    (validate.rules).uint32 = {
      gte: 0
      lte: 3
    },
    (gnostic.openapi.v3.property) = {description: "log level"}
  ];
}

// File
message File {
  string root = 1 [
    json_name = "root",
    (gnostic.openapi.v3.property) = {description: "root directory"}
  ];
}

// OSS
message Oss {
  string endpoint = 1 [
    json_name = "endpoint",
    (gnostic.openapi.v3.property) = {description: "Storage service endpoint"}
  ];
  string access_key_id = 2 [json_name = "access_key_id"];
  string access_key_secret = 3 [json_name = "access_key_secret"];
  string bucket = 4 [json_name = "bucket"];
  string region = 5 [json_name = "region"];
  bool ssl = 6 [json_name = "ssl"];
  int64 connect_timeout = 7 [
    json_name = "connect_timeout",
    (validate.rules).int64.gte = 0,
    (gnostic.openapi.v3.property) = {description: "Connection timeout in milliseconds"}
  ];
  int64 read_timeout = 8 [
    json_name = "read_timeout",
    (validate.rules).int64.gte = 0,
    (gnostic.openapi.v3.property) = {description: "Read timeout in milliseconds"}
  ];
}

// Mongo
message Mongo {
  string uri = 1 [
    json_name = "uri",
    (gnostic.openapi.v3.property) = {description: "MongoDB connection URI"}
  ];
  string database = 2 [
    json_name = "database",
    (gnostic.openapi.v3.property) = {description: "Database name"}
  ];
  string username = 3 [json_name = "username"];
  string password = 4 [json_name = "password"];
  bool auth_source = 5 [json_name = "auth_source"];
  int32 max_pool_size = 6 [json_name = "max_pool_size"];
  int32 min_pool_size = 7 [json_name = "min_pool_size"];
  int64 connect_timeout = 8 [
    json_name = "connect_timeout",
    (validate.rules).int64.gte = 0,
    (gnostic.openapi.v3.property) = {description: "Connection timeout in milliseconds"}
  ];
}

// Cache
message Cache {
  // Driver name: redis, memcached, etc.
  string driver = 1 [
    json_name = "driver",
    (validate.rules).string = {
      in: [
        "none",
        "redis",
        "memcached",
        "memory"
      ]
    },
    (gnostic.openapi.v3.property) = {description: "cache driver name"}
  ];
  string name = 2 [
    json_name = "name",
    (gnostic.openapi.v3.property) = {description: "cache name"}
  ];
  // Memcached
  Memcached memcached = 10 [
    json_name = "memcached",
    (gnostic.openapi.v3.property) = {description: "memcached cache configuration"}
  ];
  // Memory cache
  Memory memory = 11 [
    json_name = "memory",
    (gnostic.openapi.v3.property) = {description: "memory cache configuration"}
  ];
  // Redis
  Redis redis = 12 [
    json_name = "redis",
    (gnostic.openapi.v3.property) = {description: "redis cache configuration"}
  ];
  // Badger
  BadgerDS badger = 13 [
    json_name = "badger",
    (gnostic.openapi.v3.property) = {description: "badger storage configuration"}
  ];
}

message Storage {
  string name = 1 [
    json_name = "name",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "Unique identifier for the storage configuration"}
  ];

  // Type
  string type = 2 [
    json_name = "type",
    (validate.rules).string = {
      in: [
        "none",
        "file",
        "redis",
        "mongo",
        "oss",
        "database",
        "cache"
      ]
    },
    (gnostic.openapi.v3.property) = {description: "storage type"}
  ];

  // Database
  Database database = 3 [
    json_name = "database",
    (gnostic.openapi.v3.property) = {description: "database configuration"}
  ];
  // Cache
  Cache cache = 4 [
    json_name = "cache",
    (gnostic.openapi.v3.property) = {description: "cache configuration"}
  ];

  // File
  File file = 10 [
    json_name = "file",
    (gnostic.openapi.v3.property) = {description: "file storage configuration"}
  ];
  // Redis
  Redis redis = 11 [
    json_name = "redis",
    (gnostic.openapi.v3.property) = {description: "redis storage configuration"}
  ];
  // Badger
  BadgerDS badger = 12 [
    json_name = "badger",
    (gnostic.openapi.v3.property) = {description: "badger storage configuration"}
  ];
  // Mongo
  Mongo mongo = 13 [
    json_name = "mongo",
    (gnostic.openapi.v3.property) = {description: "mongo storage configuration"}
  ];
  // OSS
  Oss oss = 14 [
    json_name = "oss",
    (gnostic.openapi.v3.property) = {description: "oss storage configuration"}
  ];
}
