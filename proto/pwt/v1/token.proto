syntax = "proto3";

package pwt.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "gnostic/openapi/v3/annotations.proto";
import "security/v1/auth.proto";

option cc_enable_arenas = true;
option go_package = "github.com/origadmin/runtime/gen/go/pwt/v1;pwtv1";
option java_multiple_files = true;
option java_outer_classname = "PWTProto";
option java_package = "com.github.origadmin.runtime.pwt";
option objc_class_prefix = "ORPW";

// PWT is a web token that can be used to authenticate a user with protobuf services.
message Token {
  string client_id = 8 [
    json_name = "client_id",
    (gnostic.openapi.v3.property) = {description: "The client ID associated with the token."}
  ];
  string client_secret = 9 [
    json_name = "client_secret",
    (gnostic.openapi.v3.property) = {description: "The client secret associated with the token."}
  ];
  string token = 10 [
    json_name = "access_token",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The web access token used for authentication."}
  ];
  string refresh_token = 11 [
    json_name = "refresh_token",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The refresh token used to obtain a new access token."}
  ];
  google.protobuf.Timestamp expiration_time = 12 [
    json_name = "expiration_time",
    (gnostic.openapi.v3.property) = {description: "The expiration time of the token."}
  ];
  string scheme_type = 13 [
    json_name = "scheme_type",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The type of the token scheme (e.g., Bearer)."}
  ];
  security.v1.Claims claims = 14 [
    json_name = "claims",
    (gnostic.openapi.v3.property) = {description: "The claims embedded in the token."}
  ]; // Claims
}

// Config contains configuration parameters for creating and validating a JWT.
message Config {
  string signing_method = 1 [
    json_name = "signing_method",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The signing method used for the token (e.g., HS256, RS256)."}
  ];
  bytes key = 2 [
    json_name = "key",
    (validate.rules).bytes.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The key used for signing the token."}
  ];
  bytes key2 = 3 [
    json_name = "key2",
    (validate.rules).bytes.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The secondary key used for signing the token."}
  ];
  string keyfunc = 4 [
    json_name = "keyfunc",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The function used to retrieve the key for validation."}
  ];
  google.protobuf.Duration token_lifetime = 5 [
    json_name = "token_lifetime",
    (validate.rules).duration.gt.seconds = 0,
    (gnostic.openapi.v3.property) = {description: "The lifetime of the token."}
  ];
  string issuer = 6 [
    json_name = "issuer",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The issuer of the token."}
  ];
  repeated string audience = 7 [
    json_name = "audience",
    (validate.rules).repeated.min_items = 1,
    (gnostic.openapi.v3.property) = {description: "The audience for which the token is intended."}
  ]; // Audience
  string token_type = 8 [
    json_name = "token_type",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The type of the token (e.g., Bearer)."}
  ];
}
