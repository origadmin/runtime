// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: config/v1/logger.proto

package configv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Logger level
type LoggerLevel int32

const (
	LoggerLevel_LOGGER_LEVEL_UNSPECIFIED LoggerLevel = 0
	LoggerLevel_LOGGER_LEVEL_DEBUG       LoggerLevel = 1
	LoggerLevel_LOGGER_LEVEL_INFO        LoggerLevel = 2
	LoggerLevel_LOGGER_LEVEL_WARN        LoggerLevel = 3
	LoggerLevel_LOGGER_LEVEL_ERROR       LoggerLevel = 4
	LoggerLevel_LOGGER_LEVEL_FATAL       LoggerLevel = 5
)

// Enum value maps for LoggerLevel.
var (
	LoggerLevel_name = map[int32]string{
		0: "LOGGER_LEVEL_UNSPECIFIED",
		1: "LOGGER_LEVEL_DEBUG",
		2: "LOGGER_LEVEL_INFO",
		3: "LOGGER_LEVEL_WARN",
		4: "LOGGER_LEVEL_ERROR",
		5: "LOGGER_LEVEL_FATAL",
	}
	LoggerLevel_value = map[string]int32{
		"LOGGER_LEVEL_UNSPECIFIED": 0,
		"LOGGER_LEVEL_DEBUG":       1,
		"LOGGER_LEVEL_INFO":        2,
		"LOGGER_LEVEL_WARN":        3,
		"LOGGER_LEVEL_ERROR":       4,
		"LOGGER_LEVEL_FATAL":       5,
	}
)

func (x LoggerLevel) Enum() *LoggerLevel {
	p := new(LoggerLevel)
	*p = x
	return p
}

func (x LoggerLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggerLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_logger_proto_enumTypes[0].Descriptor()
}

func (LoggerLevel) Type() protoreflect.EnumType {
	return &file_config_v1_logger_proto_enumTypes[0]
}

func (x LoggerLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggerLevel.Descriptor instead.
func (LoggerLevel) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{0}
}

// Logger hook message
type LoggerHookMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      LoggerLevel       `protobuf:"varint,1,opt,name=level,proto3,enum=config.v1.LoggerLevel" json:"level,omitempty"`
	Message    string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Stacktrace string            `protobuf:"bytes,3,opt,name=stacktrace,proto3" json:"stacktrace,omitempty"`
	Error      string            `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Fields     map[string]string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoggerHookMessage) Reset() {
	*x = LoggerHookMessage{}
	mi := &file_config_v1_logger_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggerHookMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggerHookMessage) ProtoMessage() {}

func (x *LoggerHookMessage) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_logger_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggerHookMessage.ProtoReflect.Descriptor instead.
func (*LoggerHookMessage) Descriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{0}
}

func (x *LoggerHookMessage) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_LOGGER_LEVEL_UNSPECIFIED
}

func (x *LoggerHookMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoggerHookMessage) GetStacktrace() string {
	if x != nil {
		return x.Stacktrace
	}
	return ""
}

func (x *LoggerHookMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *LoggerHookMessage) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Logger
type Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disable logger
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Enable dev logger output
	Develop bool `protobuf:"varint,2,opt,name=develop,proto3" json:"develop,omitempty"`
	// Set default logger
	Default bool `protobuf:"varint,3,opt,name=default,proto3" json:"default,omitempty"`
	// Logger name
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Logger format json text or tint
	Format string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	// Logger level
	Level LoggerLevel `protobuf:"varint,6,opt,name=level,proto3,enum=config.v1.LoggerLevel" json:"level,omitempty"`
	// Logger output stdout
	Stdout bool `protobuf:"varint,7,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Disable logger caller
	DisableCaller bool `protobuf:"varint,8,opt,name=disable_caller,proto3" json:"disable_caller,omitempty"`
	// Logger caller skip
	CallerSkip uint32 `protobuf:"varint,9,opt,name=caller_skip,proto3" json:"caller_skip,omitempty"`
	// Logger time format
	TimeFormat string `protobuf:"bytes,10,opt,name=time_format,proto3" json:"time_format,omitempty"`
	// Logger file output config
	File *Logger_File `protobuf:"bytes,100,opt,name=file,proto3" json:"file,omitempty"`
	// Logger dev logger config
	DevLogger *Logger_DevLogger `protobuf:"bytes,101,opt,name=dev_logger,proto3" json:"dev_logger,omitempty"` //DevLogger
}

func (x *Logger) Reset() {
	*x = Logger{}
	mi := &file_config_v1_logger_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger) ProtoMessage() {}

func (x *Logger) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_logger_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger.ProtoReflect.Descriptor instead.
func (*Logger) Descriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{1}
}

func (x *Logger) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Logger) GetDevelop() bool {
	if x != nil {
		return x.Develop
	}
	return false
}

func (x *Logger) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *Logger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Logger) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Logger) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_LOGGER_LEVEL_UNSPECIFIED
}

func (x *Logger) GetStdout() bool {
	if x != nil {
		return x.Stdout
	}
	return false
}

func (x *Logger) GetDisableCaller() bool {
	if x != nil {
		return x.DisableCaller
	}
	return false
}

func (x *Logger) GetCallerSkip() uint32 {
	if x != nil {
		return x.CallerSkip
	}
	return 0
}

func (x *Logger) GetTimeFormat() string {
	if x != nil {
		return x.TimeFormat
	}
	return ""
}

func (x *Logger) GetFile() *Logger_File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Logger) GetDevLogger() *Logger_DevLogger {
	if x != nil {
		return x.DevLogger
	}
	return nil
}

// Logger file
type Logger_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Lumberjack bool   `protobuf:"varint,2,opt,name=lumberjack,proto3" json:"lumberjack,omitempty"`
	Compress   bool   `protobuf:"varint,3,opt,name=compress,proto3" json:"compress,omitempty"`
	LocalTime  bool   `protobuf:"varint,4,opt,name=local_time,proto3" json:"local_time,omitempty"`
	MaxSize    string `protobuf:"bytes,5,opt,name=max_size,proto3" json:"max_size,omitempty"`
	MaxAge     string `protobuf:"bytes,6,opt,name=max_age,proto3" json:"max_age,omitempty"`
	MaxBackups string `protobuf:"bytes,7,opt,name=max_backups,proto3" json:"max_backups,omitempty"`
}

func (x *Logger_File) Reset() {
	*x = Logger_File{}
	mi := &file_config_v1_logger_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger_File) ProtoMessage() {}

func (x *Logger_File) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_logger_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger_File.ProtoReflect.Descriptor instead.
func (*Logger_File) Descriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Logger_File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Logger_File) GetLumberjack() bool {
	if x != nil {
		return x.Lumberjack
	}
	return false
}

func (x *Logger_File) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *Logger_File) GetLocalTime() bool {
	if x != nil {
		return x.LocalTime
	}
	return false
}

func (x *Logger_File) GetMaxSize() string {
	if x != nil {
		return x.MaxSize
	}
	return ""
}

func (x *Logger_File) GetMaxAge() string {
	if x != nil {
		return x.MaxAge
	}
	return ""
}

func (x *Logger_File) GetMaxBackups() string {
	if x != nil {
		return x.MaxBackups
	}
	return ""
}

// Dev logger
type Logger_DevLogger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSlice   uint32 `protobuf:"varint,1,opt,name=max_slice,proto3" json:"max_slice,omitempty"`
	SortKeys   bool   `protobuf:"varint,2,opt,name=sort_keys,proto3" json:"sort_keys,omitempty"`
	Newline    bool   `protobuf:"varint,3,opt,name=newline,proto3" json:"newline,omitempty"`
	Indent     bool   `protobuf:"varint,4,opt,name=indent,proto3" json:"indent,omitempty"`
	DebugColor uint32 `protobuf:"varint,5,opt,name=debug_color,proto3" json:"debug_color,omitempty"`
	InfoColor  uint32 `protobuf:"varint,6,opt,name=info_color,proto3" json:"info_color,omitempty"`
	WarnColor  uint32 `protobuf:"varint,7,opt,name=warn_color,proto3" json:"warn_color,omitempty"`
	ErrorColor uint32 `protobuf:"varint,8,opt,name=error_color,proto3" json:"error_color,omitempty"`
	MaxTrace   uint32 `protobuf:"varint,9,opt,name=max_trace,proto3" json:"max_trace,omitempty"`
	Formatter  bool   `protobuf:"varint,10,opt,name=formatter,proto3" json:"formatter,omitempty"`
}

func (x *Logger_DevLogger) Reset() {
	*x = Logger_DevLogger{}
	mi := &file_config_v1_logger_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger_DevLogger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger_DevLogger) ProtoMessage() {}

func (x *Logger_DevLogger) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_logger_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger_DevLogger.ProtoReflect.Descriptor instead.
func (*Logger_DevLogger) Descriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Logger_DevLogger) GetMaxSlice() uint32 {
	if x != nil {
		return x.MaxSlice
	}
	return 0
}

func (x *Logger_DevLogger) GetSortKeys() bool {
	if x != nil {
		return x.SortKeys
	}
	return false
}

func (x *Logger_DevLogger) GetNewline() bool {
	if x != nil {
		return x.Newline
	}
	return false
}

func (x *Logger_DevLogger) GetIndent() bool {
	if x != nil {
		return x.Indent
	}
	return false
}

func (x *Logger_DevLogger) GetDebugColor() uint32 {
	if x != nil {
		return x.DebugColor
	}
	return 0
}

func (x *Logger_DevLogger) GetInfoColor() uint32 {
	if x != nil {
		return x.InfoColor
	}
	return 0
}

func (x *Logger_DevLogger) GetWarnColor() uint32 {
	if x != nil {
		return x.WarnColor
	}
	return 0
}

func (x *Logger_DevLogger) GetErrorColor() uint32 {
	if x != nil {
		return x.ErrorColor
	}
	return 0
}

func (x *Logger_DevLogger) GetMaxTrace() uint32 {
	if x != nil {
		return x.MaxTrace
	}
	return 0
}

func (x *Logger_DevLogger) GetFormatter() bool {
	if x != nil {
		return x.Formatter
	}
	return false
}

var File_config_v1_logger_proto protoreflect.FileDescriptor

var file_config_v1_logger_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x22, 0x8e, 0x02, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x48, 0x6f,
	0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x07, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x5f,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x1a, 0xce, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6a, 0x61, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6a,
	0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x1a, 0xb9, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x61, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x2a, 0xa1, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x42, 0xa2, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa,
	0x02, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_v1_logger_proto_rawDescOnce sync.Once
	file_config_v1_logger_proto_rawDescData = file_config_v1_logger_proto_rawDesc
)

func file_config_v1_logger_proto_rawDescGZIP() []byte {
	file_config_v1_logger_proto_rawDescOnce.Do(func() {
		file_config_v1_logger_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_v1_logger_proto_rawDescData)
	})
	return file_config_v1_logger_proto_rawDescData
}

var file_config_v1_logger_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_config_v1_logger_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_config_v1_logger_proto_goTypes = []any{
	(LoggerLevel)(0),          // 0: config.v1.LoggerLevel
	(*LoggerHookMessage)(nil), // 1: config.v1.LoggerHookMessage
	(*Logger)(nil),            // 2: config.v1.Logger
	nil,                       // 3: config.v1.LoggerHookMessage.FieldsEntry
	(*Logger_File)(nil),       // 4: config.v1.Logger.File
	(*Logger_DevLogger)(nil),  // 5: config.v1.Logger.DevLogger
}
var file_config_v1_logger_proto_depIdxs = []int32{
	0, // 0: config.v1.LoggerHookMessage.level:type_name -> config.v1.LoggerLevel
	3, // 1: config.v1.LoggerHookMessage.fields:type_name -> config.v1.LoggerHookMessage.FieldsEntry
	0, // 2: config.v1.Logger.level:type_name -> config.v1.LoggerLevel
	4, // 3: config.v1.Logger.file:type_name -> config.v1.Logger.File
	5, // 4: config.v1.Logger.dev_logger:type_name -> config.v1.Logger.DevLogger
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_config_v1_logger_proto_init() }
func file_config_v1_logger_proto_init() {
	if File_config_v1_logger_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_v1_logger_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v1_logger_proto_goTypes,
		DependencyIndexes: file_config_v1_logger_proto_depIdxs,
		EnumInfos:         file_config_v1_logger_proto_enumTypes,
		MessageInfos:      file_config_v1_logger_proto_msgTypes,
	}.Build()
	File_config_v1_logger_proto = out.File
	file_config_v1_logger_proto_rawDesc = nil
	file_config_v1_logger_proto_goTypes = nil
	file_config_v1_logger_proto_depIdxs = nil
}
