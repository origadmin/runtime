syntax = "proto3";

package service.v1;

import "discovery/v1/endpoint.proto"; // For the selector
import "middleware/v1/middleware.proto";
import "msg/v1/msg.proto";
import "task/v1/task.proto";
// New imports for the new transport server container and discovery selector
import "transport/v1/server.proto";
import "validate/validate.proto";
import "websocket/v1/websocket.proto";

option cc_enable_arenas = true;
option go_package = "github.com/origadmin/runtime/api/gen/go/service/v1;servicev1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.github.origadmin.api.runtime.service.v1";
option objc_class_prefix = "ORC";

message Service {
  // Service name for service discovery
  string name = 1 [json_name = "name"];

  // Protocol defines the communication protocol for the service
  string protocol = 2 [
    json_name = "protocol",
    (validate.rules).string = {
      in: [
        "http",
        "grpc",
        "websocket",
        "message",
        "task"
      ]
    }
  ];

  // Server-side transport configuration for this service.
  // This replaces the old 'grpc' and 'http' fields.
  transport.v1.Server server_transport = 10 [json_name = "server_transport"];

  websocket.v1.WebSocket websocket = 100 [json_name = "websocket"];
  msg.v1.Message message = 200 [json_name = "message"];
  task.v1.Task task = 300 [json_name = "task"];

  // Middleware configuration for the service.
  repeated middleware.v1.MiddlewareConfig middlewares = 400 [json_name = "middlewares"];

  // Endpoint configuration for the service.
  discovery.v1.Endpoint endpoint = 500 [json_name = "endpoint"];
}
