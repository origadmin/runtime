syntax = "proto3";

package config.v1;
import "config/v1/grpc.proto";
import "config/v1/http.proto";
import "config/v1/message.proto";
import "config/v1/task.proto";
import "config/v1/websocket.proto";
import "middleware/v1/middleware.proto";
import "validate/validate.proto";

option cc_enable_arenas = true;
option go_package = "github.com/origadmin/runtime/api/gen/go/config/v1;configv1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.github.origadmin.api.runtime.config.v1";
option objc_class_prefix = "ORC";

message Service {
  // Selector
  message Selector {
    string version = 1;
    string builder = 2;
  }
  // Service name for service discovery
  string name = 1 [json_name = "name"];
  
  // Protocol defines the communication protocol for the service
  string protocol = 2 [
    json_name = "protocol",
    (validate.rules).string = {
      in: [
        "http",
        "grpc",
        "websocket",
        "message",
        "task"
      ]
    }
  ];
  
  // Protocol-specific configurations.
  // Only the configuration matching the 'protocol' field will be used.
  config.v1.GRPC grpc = 10 [json_name = "grpc"];
  config.v1.HTTP http = 20 [json_name = "http"];

  config.v1.WebSocket websocket = 100 [json_name = "websocket"];
  config.v1.Message message = 200 [json_name = "message"];
  config.v1.Task task = 300 [json_name = "task"];

  // Middleware configuration for the service.
  middleware.v1.Middleware middleware = 400 [json_name = "middleware"];

  Selector selector = 500 [json_name = "selector"];
}
