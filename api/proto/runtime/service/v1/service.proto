syntax = "proto3";

package runtime.service.v1;

import "runtime/transport/v1/transport.proto";
import "runtime/middleware/v1/middleware.proto";

option go_package = "github.com/origadmin/runtime/api/gen/go/runtime/service/v1;servicev1";

// Service defines a complete microservice unit.
// It encapsulates the service's identity, its server endpoints, its client dependencies,
// and its middleware configurations.
message Service {
  // servers is a list of server endpoints that this service will expose.
  // A service can listen on multiple protocols simultaneously, e.g., both gRPC and HTTP.
  repeated transport.v1.Server servers = 2;

  // clients is a list of client configurations for services that this service depends on.
  // This list will be converted into a map in the application's bootstrap logic,
  // using the 'name' field from each Client message as the key.
  repeated transport.v1.Client clients = 3;

  // middlewares is a list of middleware configurations to be applied to the service.
  repeated middleware.v1.Middleware middlewares = 4;
}
