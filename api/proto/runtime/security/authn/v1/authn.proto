syntax = "proto3";

package runtime.security.authn.v1;

import "gnostic/openapi/v3/annotations.proto";
import "runtime/security/authn/v1/token.proto";
import "validate/validate.proto";

option cc_enable_arenas = true;
option csharp_namespace = "OrigAdmin.Runtime.Security.Authn.V1";
option go_package = "github.com/origadmin/runtime/api/gen/go/runtime/security/authn/v1;authnv1";
option java_multiple_files = true;
option java_outer_classname = "AuthNProto";
option java_package = "com.github.origadmin.api.runtime.security.authn.v1";
option objc_class_prefix = "ORSA";
option php_namespace = "OrigAdmin\\Runtime\\Security\\Authn\\V1";

message BasicAuth {
  string username = 1 [
    json_name = "username",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The username for basic authentication."}
  ];
  string password = 2 [
    json_name = "password",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The password for basic authentication."}
  ];
}

message BearerAuth {
  string token = 1 [
    json_name = "token",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The bearer token for authentication."}
  ];
}

message DigestAuth {
  string username = 1 [
    json_name = "username",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The username for digest authentication."}
  ];
  string realm = 2 [
    json_name = "realm",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The authentication realm."}
  ];
  string nonce = 3 [
    json_name = "nonce",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The server-specified nonce."}
  ];
  string uri = 4 [
    json_name = "uri",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The URI being authenticated."}
  ];
  string response = 5 [
    json_name = "response",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The client-generated response."}
  ];
  string algorithm = 6 [
    json_name = "algorithm",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The algorithm used for the digest, e.g., MD5."}
  ];
  string qop = 7 [
    json_name = "qop",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The quality of protection value, e.g., 'auth'."}
  ];
  string nc = 8 [
    json_name = "nc",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The nonce count."}
  ];
  string cnonce = 9 [
    json_name = "cnonce",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The client nonce."}
  ];
}

message OAuth2Auth {
  string access_token = 1 [
    json_name = "access_token",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The OAuth2 access token."}
  ];
  string token_type = 2 [
    json_name = "token_type",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The type of the OAuth2 token, e.g., 'Bearer'."}
  ];
  int32 expires_in = 3 [
    json_name = "expires_in",
    (validate.rules).int32.gt = 0,
    (gnostic.openapi.v3.property) = {description: "The lifetime of the OAuth2 token in seconds."}
  ];
  string refresh_token = 4 [
    json_name = "refresh_token",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The OAuth2 refresh token."}
  ];
  repeated string scope = 5 [
    json_name = "scope",
    (validate.rules).repeated.min_items = 1,
    (gnostic.openapi.v3.property) = {description: "The scopes of the OAuth2 token."}
  ];
}

message ApiKeyAuth {
  string api_key = 1 [
    json_name = "api_key",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The API key for authentication."}
  ];
}

message JwtAuth {
  string token = 1 [
    json_name = "token",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The JWT token for authentication."}
  ];
  Token jwt_token = 2 [
    json_name = "jwt_token",
    (gnostic.openapi.v3.property) = {description: "The JWT token data for authentication."}
  ];
  Claims claims = 20 [
    json_name = "claims",
    (gnostic.openapi.v3.property) = {description: "The claims embedded in the token."}
  ]; // Claims
}

message AuthN {
  enum Type {
    TYPE_UNSPECIFIED = 0; // default value not specified
    TYPE_BASIC = 1; // Basic authentication
    TYPE_BEARER = 2; // Bearer authentication
    TYPE_DIGEST = 3; // Digest authentication
    TYPE_OAUTH2 = 4; // OAuth2 authentication
    TYPE_API_KEY = 5; // API Key authentication
    TYPE_JWT = 6; // JWT authentication
    // you can add more types as needed
    TYPE_USER_ADDITIONAL = 7;
  }
  Type type = 1 [
    json_name = "type",
    (validate.rules).enum.defined_only = true,
    (gnostic.openapi.v3.property) = {description: "The type of authentication, e.g., 'basic', 'bearer', 'digest', 'oauth2', 'api_key', 'jwt'."}
  ];

  optional BasicAuth basic = 10 [
    json_name = "basic",
    (gnostic.openapi.v3.property) = {description: "The basic authentication details."}
  ];
  optional BearerAuth bearer = 11 [
    json_name = "bearer",
    (gnostic.openapi.v3.property) = {description: "The bearer authentication details."}
  ];
  optional DigestAuth digest = 12 [
    json_name = "digest",
    (gnostic.openapi.v3.property) = {description: "The digest authentication details."}
  ];
  optional OAuth2Auth oauth2 = 13 [
    json_name = "oauth2",
    (gnostic.openapi.v3.property) = {description: "The OAuth2 authentication details."}
  ];
  optional ApiKeyAuth api_key = 14 [
    json_name = "api_key",
    (gnostic.openapi.v3.property) = {description: "The API key authentication details."}
  ];
  optional JwtAuth jwt = 15 [
    json_name = "jwt",
    (gnostic.openapi.v3.property) = {description: "The JWT authentication details."}
  ];
  optional bytes additional = 16 [
    json_name = "additional",
    (gnostic.openapi.v3.property) = {description: "Additional properties for the authentication."}
  ];
}

message Claims {
  string sub = 1 [
    json_name = "sub",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The subject of the token."}
  ]; // Subject
  string iss = 2 [
    json_name = "iss",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The issuer of the token."}
  ]; // Issuer
  repeated string aud = 3 [
    json_name = "aud",
    (validate.rules).repeated.min_items = 1,
    (gnostic.openapi.v3.property) = {description: "The audience for which the token is intended."}
  ]; // Audience
  int64 exp = 4 [
    json_name = "exp",
    (gnostic.openapi.v3.property) = {description: "The expiration time of the token."}
  ]; // Expiration Time
  int64 nbf = 5 [
    json_name = "nbf",
    (gnostic.openapi.v3.property) = {description: "The time before which the token must not be accepted."}
  ]; // Not Before
  int64 iat = 6 [
    json_name = "iat",
    (gnostic.openapi.v3.property) = {description: "The time at which the token was issued."}
  ]; // Issued At
  string jti = 7 [
    json_name = "jti",
    (validate.rules).string.min_len = 1,
    (gnostic.openapi.v3.property) = {description: "The unique identifier for the token."}
  ]; // JWT ID
  map<string, bool> scopes = 8 [
    json_name = "scopes",
    (gnostic.openapi.v3.property) = {description: "The scopes associated with the token."}
  ]; // Scopes
}
