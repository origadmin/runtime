syntax = "proto3";

package runtime.api.proto.apierrors;

import "errors/errors.proto";

// The go_package option specifies the import path for the generated Go code.
// It should point to the `gen/go` directory, which is the standard output for generated files.
option go_package = "github.com/origadmin/runtime/api/gen/go/apierrors;apierrors";

// ErrorCategory defines the category of an error.
// This helps in grouping related errors together.
enum ErrorCategory {
  // General errors not specific to any category.
  GENERAL = 0;
  // Authentication and authorization related errors.
  AUTHENTICATION = 1;
  // Database related errors.
  DATABASE = 2;
  // Business logic related errors.
  BUSINESS = 3;
  // External service related errors.
  EXTERNAL_SERVICE = 4;
}

// ErrorMetadata contains additional context about an error.
message ErrorMetadata {
  // The category of the error.
  ErrorCategory category = 1;
  // Additional key-value pairs providing context about the error.
  map<string, string> metadata = 2;
}

// ErrorReason defines the application's error codes.
// These codes are mapped to HTTP status codes and are consistent across all services.
//
// The enum values are structured to allow for future expansion.
// - 0-999: General framework errors
// - 1000-1999: User and authentication related errors
// - 2000-2999: Database related errors
// - 3000-3999: Business logic errors
// - 4000-4999: External service errors
// - 5000+: Plugin-specific errors (to be defined by plugins themselves)
//
// Each error has an associated HTTP status code and can include additional metadata.
// The error messages should be user-friendly and provide enough context for debugging.
enum ErrorReason {
  // Do not use this directly. It's a placeholder for the default error code.
  option (errors.default_code) = 500;

  // --- General Framework Errors (0-999) ---

  // An unknown error occurred.
  // Maps to HTTP 500.
  UNKNOWN_ERROR = 0 [(errors.code) = 500];

  // The request was invalid or malformed.
  // Maps to HTTP 400.
  VALIDATION_ERROR = 1 [(errors.code) = 400];

  // The requested resource was not found.
  // Maps to HTTP 404.
  NOT_FOUND = 2 [(errors.code) = 404];

  // The server encountered an internal error.
  // Maps to HTTP 500.
  INTERNAL_SERVER_ERROR = 3 [(errors.code) = 500];

  // The HTTP method is not supported for the requested resource.
  // Maps to HTTP 405.
  METHOD_NOT_ALLOWED = 4 [(errors.code) = 405];

  // The server timed out waiting for the request.
  // Maps to HTTP 408.
  REQUEST_TIMEOUT = 5 [(errors.code) = 408];

  // The request could not be completed due to a conflict with the current state of the resource.
  // Maps to HTTP 409.
  CONFLICT = 6 [(errors.code) = 409];

  // The user has sent too many requests in a given amount of time.
  // Maps to HTTP 429.
  TOO_MANY_REQUESTS = 7 [(errors.code) = 429];

  // The server is not ready to handle the request.
  // Maps to HTTP 503.
  SERVICE_UNAVAILABLE = 8 [(errors.code) = 503];

  // The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server.
  // Maps to HTTP 504.
  GATEWAY_TIMEOUT = 9 [(errors.code) = 504];

  // --- Authentication & Authorization Errors (1000-1999) ---

  // The user is not authenticated.
  // Maps to HTTP 401.
  UNAUTHENTICATED = 1000 [(errors.code) = 401];

  // The user is authenticated but does not have permission to perform the action.
  // Maps to HTTP 403.
  FORBIDDEN = 1001 [(errors.code) = 403];

  // The provided credentials are invalid.
  // Maps to HTTP 401.
  INVALID_CREDENTIALS = 1002 [(errors.code) = 401];

  // The authentication token has expired.
  // Maps to HTTP 401.
  TOKEN_EXPIRED = 1003 [(errors.code) = 401];

  // The authentication token is invalid.
  // Maps to HTTP 401.
  TOKEN_INVALID = 1004 [(errors.code) = 401];

  // The authentication token is missing.
  // Maps to HTTP 401.
  TOKEN_MISSING = 1005 [(errors.code) = 401];

  // --- Database Errors (2000-2999) ---

  // The database operation failed.
  // Maps to HTTP 500.
  DATABASE_ERROR = 2000 [(errors.code) = 500];

  // A database record was not found.
  // Maps to HTTP 404.
  RECORD_NOT_FOUND = 2001 [(errors.code) = 404];

  // A database constraint was violated.
  // Maps to HTTP 409.
  CONSTRAINT_VIOLATION = 2002 [(errors.code) = 409];

  // A duplicate key was found in the database.
  // Maps to HTTP 409.
  DUPLICATE_KEY = 2003 [(errors.code) = 409];

  // The database connection failed.
  // Maps to HTTP 503.
  DATABASE_CONNECTION_FAILED = 2004 [(errors.code) = 503];

  // --- Business Logic Errors (3000-3999) ---

  // The operation is not allowed in the current state.
  // Maps to HTTP 400.
  INVALID_STATE = 3000 [(errors.code) = 400];

  // The resource already exists.
  // Maps to HTTP 409.
  RESOURCE_EXISTS = 3001 [(errors.code) = 409];

  // The resource is in use and cannot be deleted.
  // Maps to HTTP 409.
  RESOURCE_IN_USE = 3002 [(errors.code) = 409];

  // The operation was canceled.
  // Maps to HTTP 499.
  CANCELLED = 3003 [(errors.code) = 499];

  // The operation was aborted.
  // Maps to HTTP 409.
  ABORTED = 3004 [(errors.code) = 409];

  // The request is missing required parameters.
  // Maps to HTTP 400.
  MISSING_PARAMETER = 3005 [(errors.code) = 400];

  // The request contains an invalid parameter value.
  // Maps to HTTP 400.
  INVALID_PARAMETER = 3006 [(errors.code) = 400];

  // The request is not allowed in the current context.
  // Maps to HTTP 403.
  OPERATION_NOT_ALLOWED = 3007 [(errors.code) = 403];

  // --- External Service Errors (4000-4999) ---

  // An external service is unavailable.
  // Maps to HTTP 503.
  EXTERNAL_SERVICE_UNAVAILABLE = 4000 [(errors.code) = 503];

  // An external service returned an error.
  // Maps to HTTP 502.
  EXTERNAL_SERVICE_ERROR = 4001 [(errors.code) = 502];

  // An external service timed out.
  // Maps to HTTP 504.
  EXTERNAL_SERVICE_TIMEOUT = 4002 [(errors.code) = 504];

  // The request to an external service was invalid.
  // Maps to HTTP 400.
  EXTERNAL_SERVICE_BAD_REQUEST = 4003 [(errors.code) = 400];

  // The request to an external service was unauthorized.
  // Maps to HTTP 401.
  EXTERNAL_SERVICE_UNAUTHORIZED = 4004 [(errors.code) = 401];

  // The request to an external service was forbidden.
  // Maps to HTTP 403.
  EXTERNAL_SERVICE_FORBIDDEN = 4005 [(errors.code) = 403];

  // The requested resource was not found in the external service.
  // Maps to HTTP 404.
  EXTERNAL_SERVICE_NOT_FOUND = 4006 [(errors.code) = 404];

  // The external service is rate limiting requests.
  // Maps to HTTP 429.
  EXTERNAL_SERVICE_RATE_LIMIT = 4007 [(errors.code) = 429];

  // The external service returned an unexpected response.
  // Maps to HTTP 502.
  EXTERNAL_SERVICE_UNEXPECTED_RESPONSE = 4008 [(errors.code) = 502];

  // The external service is not configured correctly.
  // Maps to HTTP 500.
  EXTERNAL_SERVICE_MISCONFIGURED = 4009 [(errors.code) = 500];

  // The external service returned a response that could not be processed.
  // Maps to HTTP 502.
  EXTERNAL_SERVICE_INVALID_RESPONSE = 4010 [(errors.code) = 502];

  // The external service requires authentication.
  // Maps to HTTP 401.
  EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED = 4011 [(errors.code) = 401];

  // The external service request was rejected due to invalid parameters.
  // Maps to HTTP 400.
  EXTERNAL_SERVICE_INVALID_REQUEST = 4012 [(errors.code) = 400];

  // The external service is currently overloaded.
  // Maps to HTTP 503.
  EXTERNAL_SERVICE_OVERLOADED = 4013 [(errors.code) = 503];
}
