syntax = "proto3";

package common.v1;

option go_package = "github.com/origadmin/runtime/api/gen/go/common/v1;commonv1";

// PaginationRequest provides a flexible structure for pagination requests, supporting
// both cursor-based (infinite scroll) and offset-based (numbered pages) pagination.
// The server should prioritize `page_token` if both `page_token` and `page` are provided.
message PaginationRequest {
  // For offset-based pagination: the page number to retrieve (1-indexed).
  int32 page = 1;

  // The maximum number of items to return per page. The server may enforce a
  // maximum limit to this value.
  int32 page_size = 2;

  // For cursor-based pagination: a token identifying a page of results the server
  // should return. This is the `next_page_token` from a previous response.
  string page_token = 3;

  // If true, the server will only return the `total_size` in the response Pagination
  // message, and the `items` list will be empty. This is useful for fetching
  // only the total count of items.
  bool only_count = 4;
}

// Pagination provides a comprehensive structure for pagination responses, supporting
// both cursor-based (infinite scroll) and offset-based (numbered pages) pagination.
message Pagination {
  // For offset-based pagination: the current page number (1-indexed).
  int32 page = 1;

  // The number of items retrieved on the current page.
  int32 page_size = 2;

  // For offset-based pagination: the total number of items available across all pages.
  // This is optional and may be expensive to calculate for large datasets.
  int64 total_size = 3;

  // For cursor-based pagination: a token to retrieve the next page of results.
  // If empty, there are no more results.
  string next_page_token = 4;
}
