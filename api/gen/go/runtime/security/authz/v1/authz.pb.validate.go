// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: runtime/security/authz/v1/authz.proto

package authzv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CasbinAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CasbinAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CasbinAuth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CasbinAuthMultiError, or
// nil if none found.
func (m *CasbinAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *CasbinAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CasbinAuthValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CasbinAuthValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CasbinAuthValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClaims()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CasbinAuthValidationError{
					field:  "Claims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CasbinAuthValidationError{
					field:  "Claims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClaims()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CasbinAuthValidationError{
				field:  "Claims",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CasbinAuthMultiError(errors)
	}

	return nil
}

// CasbinAuthMultiError is an error wrapping multiple validation errors
// returned by CasbinAuth.ValidateAll() if the designated constraints aren't met.
type CasbinAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CasbinAuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CasbinAuthMultiError) AllErrors() []error { return m }

// CasbinAuthValidationError is the validation error returned by
// CasbinAuth.Validate if the designated constraints aren't met.
type CasbinAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CasbinAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CasbinAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CasbinAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CasbinAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CasbinAuthValidationError) ErrorName() string { return "CasbinAuthValidationError" }

// Error satisfies the builtin error interface
func (e CasbinAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCasbinAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CasbinAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CasbinAuthValidationError{}

// Validate checks the field values on AuthZ with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthZ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthZ with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthZMultiError, or nil if none found.
func (m *AuthZ) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthZ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Root

	// no validation rules for Id

	if _, ok := _AuthZ_UserType_InLookup[m.GetUserType()]; !ok {
		err := AuthZValidationError{
			field:  "UserType",
			reason: "value must be in list [admin user guest]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Timestamp

	if all {
		switch v := interface{}(m.GetCasbin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthZValidationError{
					field:  "Casbin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthZValidationError{
					field:  "Casbin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCasbin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthZValidationError{
				field:  "Casbin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthZMultiError(errors)
	}

	return nil
}

// AuthZMultiError is an error wrapping multiple validation errors returned by
// AuthZ.ValidateAll() if the designated constraints aren't met.
type AuthZMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthZMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthZMultiError) AllErrors() []error { return m }

// AuthZValidationError is the validation error returned by AuthZ.Validate if
// the designated constraints aren't met.
type AuthZValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthZValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthZValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthZValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthZValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthZValidationError) ErrorName() string { return "AuthZValidationError" }

// Error satisfies the builtin error interface
func (e AuthZValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthZ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthZValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthZValidationError{}

var _AuthZ_UserType_InLookup = map[string]struct{}{
	"admin": {},
	"user":  {},
	"guest": {},
}
