// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/v1/source.proto

package configv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileSource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileSource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileSourceMultiError, or
// nil if none found.
func (m *FileSource) ValidateAll() error {
	return m.validate(true)
}

func (m *FileSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Format

	// no validation rules for Reload

	if len(errors) > 0 {
		return FileSourceMultiError(errors)
	}

	return nil
}

// FileSourceMultiError is an error wrapping multiple validation errors
// returned by FileSource.ValidateAll() if the designated constraints aren't met.
type FileSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileSourceMultiError) AllErrors() []error { return m }

// FileSourceValidationError is the validation error returned by
// FileSource.Validate if the designated constraints aren't met.
type FileSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileSourceValidationError) ErrorName() string { return "FileSourceValidationError" }

// Error satisfies the builtin error interface
func (e FileSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileSourceValidationError{}

// Validate checks the field values on EnvSource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnvSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnvSource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnvSourceMultiError, or nil
// if none found.
func (m *EnvSource) ValidateAll() error {
	return m.validate(true)
}

func (m *EnvSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Args

	// no validation rules for Watch

	// no validation rules for Nested

	if len(errors) > 0 {
		return EnvSourceMultiError(errors)
	}

	return nil
}

// EnvSourceMultiError is an error wrapping multiple validation errors returned
// by EnvSource.ValidateAll() if the designated constraints aren't met.
type EnvSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvSourceMultiError) AllErrors() []error { return m }

// EnvSourceValidationError is the validation error returned by
// EnvSource.Validate if the designated constraints aren't met.
type EnvSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvSourceValidationError) ErrorName() string { return "EnvSourceValidationError" }

// Error satisfies the builtin error interface
func (e EnvSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvSourceValidationError{}

// Validate checks the field values on ConsulSource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConsulSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsulSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsulSourceMultiError, or
// nil if none found.
func (m *ConsulSource) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsulSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Scheme

	// no validation rules for Token

	// no validation rules for Path

	// no validation rules for Datacenter

	// no validation rules for Namespace

	// no validation rules for WaitTime

	// no validation rules for Timeout

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsulSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsulSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsulSourceValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConsulSourceMultiError(errors)
	}

	return nil
}

// ConsulSourceMultiError is an error wrapping multiple validation errors
// returned by ConsulSource.ValidateAll() if the designated constraints aren't met.
type ConsulSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsulSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsulSourceMultiError) AllErrors() []error { return m }

// ConsulSourceValidationError is the validation error returned by
// ConsulSource.Validate if the designated constraints aren't met.
type ConsulSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsulSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsulSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsulSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsulSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsulSourceValidationError) ErrorName() string { return "ConsulSourceValidationError" }

// Error satisfies the builtin error interface
func (e ConsulSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsulSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsulSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsulSourceValidationError{}

// Validate checks the field values on ETCDSource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ETCDSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ETCDSource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ETCDSourceMultiError, or
// nil if none found.
func (m *ETCDSource) ValidateAll() error {
	return m.validate(true)
}

func (m *ETCDSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Path

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ETCDSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ETCDSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ETCDSourceValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ETCDSourceMultiError(errors)
	}

	return nil
}

// ETCDSourceMultiError is an error wrapping multiple validation errors
// returned by ETCDSource.ValidateAll() if the designated constraints aren't met.
type ETCDSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ETCDSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ETCDSourceMultiError) AllErrors() []error { return m }

// ETCDSourceValidationError is the validation error returned by
// ETCDSource.Validate if the designated constraints aren't met.
type ETCDSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ETCDSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ETCDSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ETCDSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ETCDSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ETCDSourceValidationError) ErrorName() string { return "ETCDSourceValidationError" }

// Error satisfies the builtin error interface
func (e ETCDSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sETCDSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ETCDSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ETCDSourceValidationError{}

// Validate checks the field values on NacosSource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NacosSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NacosSource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NacosSourceMultiError, or
// nil if none found.
func (m *NacosSource) ValidateAll() error {
	return m.validate(true)
}

func (m *NacosSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Namespace

	// no validation rules for Group

	// no validation rules for DataId

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Format

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NacosSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NacosSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NacosSourceValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NacosSourceMultiError(errors)
	}

	return nil
}

// NacosSourceMultiError is an error wrapping multiple validation errors
// returned by NacosSource.ValidateAll() if the designated constraints aren't met.
type NacosSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NacosSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NacosSourceMultiError) AllErrors() []error { return m }

// NacosSourceValidationError is the validation error returned by
// NacosSource.Validate if the designated constraints aren't met.
type NacosSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NacosSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NacosSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NacosSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NacosSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NacosSourceValidationError) ErrorName() string { return "NacosSourceValidationError" }

// Error satisfies the builtin error interface
func (e NacosSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNacosSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NacosSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NacosSourceValidationError{}

// Validate checks the field values on ApolloSource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApolloSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApolloSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApolloSourceMultiError, or
// nil if none found.
func (m *ApolloSource) ValidateAll() error {
	return m.validate(true)
}

func (m *ApolloSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for AppId

	// no validation rules for Cluster

	// no validation rules for Namespace

	// no validation rules for Secret

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApolloSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApolloSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApolloSourceValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApolloSourceMultiError(errors)
	}

	return nil
}

// ApolloSourceMultiError is an error wrapping multiple validation errors
// returned by ApolloSource.ValidateAll() if the designated constraints aren't met.
type ApolloSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApolloSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApolloSourceMultiError) AllErrors() []error { return m }

// ApolloSourceValidationError is the validation error returned by
// ApolloSource.Validate if the designated constraints aren't met.
type ApolloSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApolloSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApolloSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApolloSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApolloSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApolloSourceValidationError) ErrorName() string { return "ApolloSourceValidationError" }

// Error satisfies the builtin error interface
func (e ApolloSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApolloSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApolloSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApolloSourceValidationError{}

// Validate checks the field values on KubernetesSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KubernetesSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesSourceMultiError, or nil if none found.
func (m *KubernetesSource) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ConfigMap

	// no validation rules for Secret

	// no validation rules for Key

	// no validation rules for Watch

	// no validation rules for Kubeconfig

	if len(errors) > 0 {
		return KubernetesSourceMultiError(errors)
	}

	return nil
}

// KubernetesSourceMultiError is an error wrapping multiple validation errors
// returned by KubernetesSource.ValidateAll() if the designated constraints
// aren't met.
type KubernetesSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesSourceMultiError) AllErrors() []error { return m }

// KubernetesSourceValidationError is the validation error returned by
// KubernetesSource.Validate if the designated constraints aren't met.
type KubernetesSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesSourceValidationError) ErrorName() string { return "KubernetesSourceValidationError" }

// Error satisfies the builtin error interface
func (e KubernetesSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesSourceValidationError{}

// Validate checks the field values on PolarisSource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolarisSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolarisSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolarisSourceMultiError, or
// nil if none found.
func (m *PolarisSource) ValidateAll() error {
	return m.validate(true)
}

func (m *PolarisSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Namespace

	// no validation rules for Group

	// no validation rules for File

	// no validation rules for Timeout

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolarisSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolarisSourceValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolarisSourceValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolarisSourceMultiError(errors)
	}

	return nil
}

// PolarisSourceMultiError is an error wrapping multiple validation errors
// returned by PolarisSource.ValidateAll() if the designated constraints
// aren't met.
type PolarisSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolarisSourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolarisSourceMultiError) AllErrors() []error { return m }

// PolarisSourceValidationError is the validation error returned by
// PolarisSource.Validate if the designated constraints aren't met.
type PolarisSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolarisSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolarisSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolarisSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolarisSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolarisSourceValidationError) ErrorName() string { return "PolarisSourceValidationError" }

// Error satisfies the builtin error interface
func (e PolarisSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolarisSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolarisSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolarisSourceValidationError{}

// Validate checks the field values on Sources with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sources with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SourcesMultiError, or nil if none found.
func (m *Sources) ValidateAll() error {
	return m.validate(true)
}

func (m *Sources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	for idx, item := range m.GetSources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourcesValidationError{
						field:  fmt.Sprintf("Sources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourcesValidationError{
						field:  fmt.Sprintf("Sources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourcesValidationError{
					field:  fmt.Sprintf("Sources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SourcesMultiError(errors)
	}

	return nil
}

// SourcesMultiError is an error wrapping multiple validation errors returned
// by Sources.ValidateAll() if the designated constraints aren't met.
type SourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SourcesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SourcesMultiError) AllErrors() []error { return m }

// SourcesValidationError is the validation error returned by Sources.Validate
// if the designated constraints aren't met.
type SourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourcesValidationError) ErrorName() string { return "SourcesValidationError" }

// Error satisfies the builtin error interface
func (e SourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourcesValidationError{}

// Validate checks the field values on SourceConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SourceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SourceConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SourceConfigMultiError, or
// nil if none found.
func (m *SourceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *SourceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SourceConfig_Type_InLookup[m.GetType()]; !ok {
		err := SourceConfigValidationError{
			field:  "Type",
			reason: "value must be in list [env file etcd consul apollo nacos kubernetes polaris customize]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for EnvArgs

	switch v := m.Config.(type) {
	case *SourceConfig_Env:
		if v == nil {
			err := SourceConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEnv()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Env",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Env",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnv()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceConfigValidationError{
					field:  "Env",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SourceConfig_File:
		if v == nil {
			err := SourceConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "File",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "File",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceConfigValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SourceConfig_Etcd:
		if v == nil {
			err := SourceConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEtcd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Etcd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Etcd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEtcd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceConfigValidationError{
					field:  "Etcd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SourceConfig_Consul:
		if v == nil {
			err := SourceConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConsul()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Consul",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Consul",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConsul()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceConfigValidationError{
					field:  "Consul",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SourceConfig_Nacos:
		if v == nil {
			err := SourceConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNacos()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Nacos",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Nacos",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNacos()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceConfigValidationError{
					field:  "Nacos",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SourceConfig_Apollo:
		if v == nil {
			err := SourceConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetApollo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Apollo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Apollo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApollo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceConfigValidationError{
					field:  "Apollo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SourceConfig_Kubernetes:
		if v == nil {
			err := SourceConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKubernetes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Kubernetes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Kubernetes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKubernetes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceConfigValidationError{
					field:  "Kubernetes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SourceConfig_Polaris:
		if v == nil {
			err := SourceConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPolaris()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Polaris",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Polaris",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPolaris()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceConfigValidationError{
					field:  "Polaris",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SourceConfig_Customize:
		if v == nil {
			err := SourceConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCustomize()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Customize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SourceConfigValidationError{
						field:  "Customize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCustomize()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SourceConfigValidationError{
					field:  "Customize",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SourceConfigMultiError(errors)
	}

	return nil
}

// SourceConfigMultiError is an error wrapping multiple validation errors
// returned by SourceConfig.ValidateAll() if the designated constraints aren't met.
type SourceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SourceConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SourceConfigMultiError) AllErrors() []error { return m }

// SourceConfigValidationError is the validation error returned by
// SourceConfig.Validate if the designated constraints aren't met.
type SourceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceConfigValidationError) ErrorName() string { return "SourceConfigValidationError" }

// Error satisfies the builtin error interface
func (e SourceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSourceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceConfigValidationError{}

var _SourceConfig_Type_InLookup = map[string]struct{}{
	"env":        {},
	"file":       {},
	"etcd":       {},
	"consul":     {},
	"apollo":     {},
	"nacos":      {},
	"kubernetes": {},
	"polaris":    {},
	"customize":  {},
}
