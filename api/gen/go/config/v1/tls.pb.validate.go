// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/v1/tls.proto

package configv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TLSConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TLSConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TLSConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TLSConfigMultiError, or nil
// if none found.
func (m *TLSConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TLSConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if _, ok := _TLSConfig_MinVersion_InLookup[m.GetMinVersion()]; !ok {
		err := TLSConfigValidationError{
			field:  "MinVersion",
			reason: "value must be in list [1.0 1.1 1.2 1.3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RequireClientCert

	// no validation rules for ClientCaFile

	switch v := m.Config.(type) {
	case *TLSConfig_File:
		if v == nil {
			err := TLSConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TLSConfigValidationError{
						field:  "File",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TLSConfigValidationError{
						field:  "File",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TLSConfigValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TLSConfig_Pem:
		if v == nil {
			err := TLSConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPem()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TLSConfigValidationError{
						field:  "Pem",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TLSConfigValidationError{
						field:  "Pem",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPem()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TLSConfigValidationError{
					field:  "Pem",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TLSConfigMultiError(errors)
	}

	return nil
}

// TLSConfigMultiError is an error wrapping multiple validation errors returned
// by TLSConfig.ValidateAll() if the designated constraints aren't met.
type TLSConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TLSConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TLSConfigMultiError) AllErrors() []error { return m }

// TLSConfigValidationError is the validation error returned by
// TLSConfig.Validate if the designated constraints aren't met.
type TLSConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSConfigValidationError) ErrorName() string { return "TLSConfigValidationError" }

// Error satisfies the builtin error interface
func (e TLSConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSConfigValidationError{}

var _TLSConfig_MinVersion_InLookup = map[string]struct{}{
	"1.0": {},
	"1.1": {},
	"1.2": {},
	"1.3": {},
}

// Validate checks the field values on FileConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileConfigMultiError, or
// nil if none found.
func (m *FileConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *FileConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCert()) < 1 {
		err := FileConfigValidationError{
			field:  "Cert",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := FileConfigValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Ca

	if len(errors) > 0 {
		return FileConfigMultiError(errors)
	}

	return nil
}

// FileConfigMultiError is an error wrapping multiple validation errors
// returned by FileConfig.ValidateAll() if the designated constraints aren't met.
type FileConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileConfigMultiError) AllErrors() []error { return m }

// FileConfigValidationError is the validation error returned by
// FileConfig.Validate if the designated constraints aren't met.
type FileConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileConfigValidationError) ErrorName() string { return "FileConfigValidationError" }

// Error satisfies the builtin error interface
func (e FileConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileConfigValidationError{}

// Validate checks the field values on PEMConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PEMConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PEMConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PEMConfigMultiError, or nil
// if none found.
func (m *PEMConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PEMConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetCert()) < 1 {
		err := PEMConfigValidationError{
			field:  "Cert",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetKey()) < 1 {
		err := PEMConfigValidationError{
			field:  "Key",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Ca

	if len(errors) > 0 {
		return PEMConfigMultiError(errors)
	}

	return nil
}

// PEMConfigMultiError is an error wrapping multiple validation errors returned
// by PEMConfig.ValidateAll() if the designated constraints aren't met.
type PEMConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PEMConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PEMConfigMultiError) AllErrors() []error { return m }

// PEMConfigValidationError is the validation error returned by
// PEMConfig.Validate if the designated constraints aren't met.
type PEMConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PEMConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PEMConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PEMConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PEMConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PEMConfigValidationError) ErrorName() string { return "PEMConfigValidationError" }

// Error satisfies the builtin error interface
func (e PEMConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPEMConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PEMConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PEMConfigValidationError{}
