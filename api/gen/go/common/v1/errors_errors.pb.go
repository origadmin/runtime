// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package commonv1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// --- General Framework Errors (0-999) ---
func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNKNOWN_ERROR.String() && e.Code == 500
}

// --- General Framework Errors (0-999) ---
func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsValidationError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VALIDATION_ERROR.String() && e.Code == 400
}

func ErrorValidationError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_VALIDATION_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_FOUND.String() && e.Code == 404
}

func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL_SERVER_ERROR.String() && e.Code == 500
}

func ErrorInternalServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

func ErrorMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

func IsRequestTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REQUEST_TIMEOUT.String() && e.Code == 408
}

func ErrorRequestTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, ErrorReason_REQUEST_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

func IsConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONFLICT.String() && e.Code == 409
}

func ErrorConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsTooManyRequests(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOO_MANY_REQUESTS.String() && e.Code == 429
}

func ErrorTooManyRequests(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorReason_TOO_MANY_REQUESTS.String(), fmt.Sprintf(format, args...))
}

func IsServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SERVICE_UNAVAILABLE.String() && e.Code == 503
}

func ErrorServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_SERVICE_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

func IsGatewayTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GATEWAY_TIMEOUT.String() && e.Code == 504
}

func ErrorGatewayTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorReason_GATEWAY_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// --- Common Authentication & Authorization Errors (1000-1999) ---
func IsUnauthenticated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNAUTHENTICATED.String() && e.Code == 401
}

// --- Common Authentication & Authorization Errors (1000-1999) ---
func ErrorUnauthenticated(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_UNAUTHENTICATED.String(), fmt.Sprintf(format, args...))
}

func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FORBIDDEN.String() && e.Code == 403
}

func ErrorForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

// --- Common Database Errors (2000-2999) ---
func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATABASE_ERROR.String() && e.Code == 500
}

// --- Common Database Errors (2000-2999) ---
func ErrorDatabaseError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DATABASE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsRecordNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RECORD_NOT_FOUND.String() && e.Code == 404
}

func ErrorRecordNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_RECORD_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsConstraintViolation(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONSTRAINT_VIOLATION.String() && e.Code == 409
}

func ErrorConstraintViolation(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_CONSTRAINT_VIOLATION.String(), fmt.Sprintf(format, args...))
}

func IsDuplicateKey(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DUPLICATE_KEY.String() && e.Code == 409
}

func ErrorDuplicateKey(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_DUPLICATE_KEY.String(), fmt.Sprintf(format, args...))
}

func IsDatabaseConnectionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATABASE_CONNECTION_FAILED.String() && e.Code == 503
}

func ErrorDatabaseConnectionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_DATABASE_CONNECTION_FAILED.String(), fmt.Sprintf(format, args...))
}

// --- Common Business Logic Errors (3000-3999) ---
func IsInvalidState(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_STATE.String() && e.Code == 400
}

// --- Common Business Logic Errors (3000-3999) ---
func ErrorInvalidState(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_STATE.String(), fmt.Sprintf(format, args...))
}

func IsResourceExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESOURCE_EXISTS.String() && e.Code == 409
}

func ErrorResourceExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_RESOURCE_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsResourceInUse(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESOURCE_IN_USE.String() && e.Code == 409
}

func ErrorResourceInUse(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_RESOURCE_IN_USE.String(), fmt.Sprintf(format, args...))
}

func IsCancelled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CANCELLED.String() && e.Code == 499
}

func ErrorCancelled(format string, args ...interface{}) *errors.Error {
	return errors.New(499, ErrorReason_CANCELLED.String(), fmt.Sprintf(format, args...))
}

func IsAborted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ABORTED.String() && e.Code == 409
}

func ErrorAborted(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_ABORTED.String(), fmt.Sprintf(format, args...))
}

func IsMissingParameter(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MISSING_PARAMETER.String() && e.Code == 400
}

func ErrorMissingParameter(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MISSING_PARAMETER.String(), fmt.Sprintf(format, args...))
}

func IsInvalidParameter(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_PARAMETER.String() && e.Code == 400
}

func ErrorInvalidParameter(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_PARAMETER.String(), fmt.Sprintf(format, args...))
}

func IsOperationNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATION_NOT_ALLOWED.String() && e.Code == 403
}

func ErrorOperationNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_OPERATION_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

// --- Common External Service Errors (4000-4999) ---
func IsExternalServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EXTERNAL_SERVICE_UNAVAILABLE.String() && e.Code == 503
}

// --- Common External Service Errors (4000-4999) ---
func ErrorExternalServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_EXTERNAL_SERVICE_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

func IsExternalServiceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EXTERNAL_SERVICE_ERROR.String() && e.Code == 502
}

func ErrorExternalServiceError(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ErrorReason_EXTERNAL_SERVICE_ERROR.String(), fmt.Sprintf(format, args...))
}

// --- Common Registry Errors (6000-6999) ---
func IsRegistryNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REGISTRY_NOT_FOUND.String() && e.Code == 404
}

// --- Common Registry Errors (6000-6999) ---
func ErrorRegistryNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_REGISTRY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
