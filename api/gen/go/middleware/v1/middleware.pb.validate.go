// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: middleware/v1/middleware.proto

package middlewarev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Data

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on MiddlewareConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MiddlewareConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiddlewareConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MiddlewareConfigMultiError, or nil if none found.
func (m *MiddlewareConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MiddlewareConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Type

	if m.RateLimiter != nil {

		if all {
			switch v := interface{}(m.GetRateLimiter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "RateLimiter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "RateLimiter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRateLimiter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareConfigValidationError{
					field:  "RateLimiter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Metrics != nil {

		if all {
			switch v := interface{}(m.GetMetrics()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Metrics",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Metrics",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetrics()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareConfigValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Validator != nil {

		if all {
			switch v := interface{}(m.GetValidator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Validator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Validator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetValidator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareConfigValidationError{
					field:  "Validator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Jwt != nil {

		if all {
			switch v := interface{}(m.GetJwt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Jwt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Jwt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareConfigValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Selector != nil {

		if all {
			switch v := interface{}(m.GetSelector()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Selector",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Selector",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareConfigValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Cors != nil {

		if all {
			switch v := interface{}(m.GetCors()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Cors",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Cors",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCors()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareConfigValidationError{
					field:  "Cors",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CircuitBreaker != nil {

		if all {
			switch v := interface{}(m.GetCircuitBreaker()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "CircuitBreaker",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "CircuitBreaker",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCircuitBreaker()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareConfigValidationError{
					field:  "CircuitBreaker",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Metadata != nil {

		if all {
			switch v := interface{}(m.GetMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareConfigValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Custom != nil {

		if all {
			switch v := interface{}(m.GetCustom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Custom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareConfigValidationError{
						field:  "Custom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareConfigValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MiddlewareConfigMultiError(errors)
	}

	return nil
}

// MiddlewareConfigMultiError is an error wrapping multiple validation errors
// returned by MiddlewareConfig.ValidateAll() if the designated constraints
// aren't met.
type MiddlewareConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareConfigMultiError) AllErrors() []error { return m }

// MiddlewareConfigValidationError is the validation error returned by
// MiddlewareConfig.Validate if the designated constraints aren't met.
type MiddlewareConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareConfigValidationError) ErrorName() string { return "MiddlewareConfigValidationError" }

// Error satisfies the builtin error interface
func (e MiddlewareConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewareConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareConfigValidationError{}

// Validate checks the field values on Middlewares with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Middlewares) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Middlewares with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MiddlewaresMultiError, or
// nil if none found.
func (m *Middlewares) ValidateAll() error {
	return m.validate(true)
}

func (m *Middlewares) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMiddlewares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewaresValidationError{
						field:  fmt.Sprintf("Middlewares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewaresValidationError{
						field:  fmt.Sprintf("Middlewares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewaresValidationError{
					field:  fmt.Sprintf("Middlewares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MiddlewaresMultiError(errors)
	}

	return nil
}

// MiddlewaresMultiError is an error wrapping multiple validation errors
// returned by Middlewares.ValidateAll() if the designated constraints aren't met.
type MiddlewaresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewaresMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewaresMultiError) AllErrors() []error { return m }

// MiddlewaresValidationError is the validation error returned by
// Middlewares.Validate if the designated constraints aren't met.
type MiddlewaresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewaresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewaresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewaresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewaresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewaresValidationError) ErrorName() string { return "MiddlewaresValidationError" }

// Error satisfies the builtin error interface
func (e MiddlewaresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewares.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewaresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewaresValidationError{}
