// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: source/v1/env_source.proto

package sourcev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EnvSource is the environment variable source
type EnvSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Environment variable prefixes to include
	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	// Additional environment variables to set
	Args map[string]string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Whether to watch for environment variable changes
	Watch bool `protobuf:"varint,3,opt,name=watch,proto3" json:"watch,omitempty"`
	// Whether to treat environment variables as nested structure
	Nested        bool `protobuf:"varint,4,opt,name=nested,proto3" json:"nested,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnvSource) Reset() {
	*x = EnvSource{}
	mi := &file_source_v1_env_source_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvSource) ProtoMessage() {}

func (x *EnvSource) ProtoReflect() protoreflect.Message {
	mi := &file_source_v1_env_source_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvSource.ProtoReflect.Descriptor instead.
func (*EnvSource) Descriptor() ([]byte, []int) {
	return file_source_v1_env_source_proto_rawDescGZIP(), []int{0}
}

func (x *EnvSource) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *EnvSource) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *EnvSource) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *EnvSource) GetNested() bool {
	if x != nil {
		return x.Nested
	}
	return false
}

var File_source_v1_env_source_proto protoreflect.FileDescriptor

const file_source_v1_env_source_proto_rawDesc = "" +
	"\n" +
	"\x1asource/v1/env_source.proto\x12\tsource.v1\"\xc2\x01\n" +
	"\tEnvSource\x12\x1a\n" +
	"\bprefixes\x18\x01 \x03(\tR\bprefixes\x122\n" +
	"\x04args\x18\x02 \x03(\v2\x1e.source.v1.EnvSource.ArgsEntryR\x04args\x12\x14\n" +
	"\x05watch\x18\x03 \x01(\bR\x05watch\x12\x16\n" +
	"\x06nested\x18\x04 \x01(\bR\x06nested\x1a7\n" +
	"\tArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xa3\x01\n" +
	"\rcom.source.v1B\x0eEnvSourceProtoP\x01Z:github.com/origadmin/runtime/api/gen/go/source/v1;sourcev1\xf8\x01\x01\xa2\x02\x03SXX\xaa\x02\tSource.V1\xca\x02\tSource\\V1\xe2\x02\x15Source\\V1\\GPBMetadata\xea\x02\n" +
	"Source::V1b\x06proto3"

var (
	file_source_v1_env_source_proto_rawDescOnce sync.Once
	file_source_v1_env_source_proto_rawDescData []byte
)

func file_source_v1_env_source_proto_rawDescGZIP() []byte {
	file_source_v1_env_source_proto_rawDescOnce.Do(func() {
		file_source_v1_env_source_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_source_v1_env_source_proto_rawDesc), len(file_source_v1_env_source_proto_rawDesc)))
	})
	return file_source_v1_env_source_proto_rawDescData
}

var file_source_v1_env_source_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_source_v1_env_source_proto_goTypes = []any{
	(*EnvSource)(nil), // 0: source.v1.EnvSource
	nil,               // 1: source.v1.EnvSource.ArgsEntry
}
var file_source_v1_env_source_proto_depIdxs = []int32{
	1, // 0: source.v1.EnvSource.args:type_name -> source.v1.EnvSource.ArgsEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_source_v1_env_source_proto_init() }
func file_source_v1_env_source_proto_init() {
	if File_source_v1_env_source_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_source_v1_env_source_proto_rawDesc), len(file_source_v1_env_source_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_source_v1_env_source_proto_goTypes,
		DependencyIndexes: file_source_v1_env_source_proto_depIdxs,
		MessageInfos:      file_source_v1_env_source_proto_msgTypes,
	}.Build()
	File_source_v1_env_source_proto = out.File
	file_source_v1_env_source_proto_goTypes = nil
	file_source_v1_env_source_proto_depIdxs = nil
}
