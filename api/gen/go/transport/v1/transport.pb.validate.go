// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transport/v1/transport.proto

package transportv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Transport with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transport with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransportMultiError, or nil
// if none found.
func (m *Transport) ValidateAll() error {
	return m.validate(true)
}

func (m *Transport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGrpc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportValidationError{
				field:  "Grpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHttp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransportMultiError(errors)
	}

	return nil
}

// TransportMultiError is an error wrapping multiple validation errors returned
// by Transport.ValidateAll() if the designated constraints aren't met.
type TransportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportMultiError) AllErrors() []error { return m }

// TransportValidationError is the validation error returned by
// Transport.Validate if the designated constraints aren't met.
type TransportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportValidationError) ErrorName() string { return "TransportValidationError" }

// Error satisfies the builtin error interface
func (e TransportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportValidationError{}

// Validate checks the field values on Transport_GRPC with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transport_GRPC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transport_GRPC with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Transport_GRPCMultiError,
// or nil if none found.
func (m *Transport_GRPC) ValidateAll() error {
	return m.validate(true)
}

func (m *Transport_GRPC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Transport_GRPC_Network_InLookup[m.GetNetwork()]; !ok {
		err := Transport_GRPCValidationError{
			field:  "Network",
			reason: "value must be in list [tcp tcp4 tcp6 unix unixpacket]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddr()) < 1 {
		err := Transport_GRPCValidationError{
			field:  "Addr",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Transport_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Transport_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Transport_GRPCValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShutdownTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Transport_GRPCValidationError{
					field:  "ShutdownTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Transport_GRPCValidationError{
					field:  "ShutdownTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShutdownTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Transport_GRPCValidationError{
				field:  "ShutdownTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Endpoint

	// no validation rules for EnableReflection

	if m.GetMaxRecvMsgSize() <= 0 {
		err := Transport_GRPCValidationError{
			field:  "MaxRecvMsgSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxSendMsgSize() <= 0 {
		err := Transport_GRPCValidationError{
			field:  "MaxSendMsgSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Transport_GRPCValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Transport_GRPCValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Transport_GRPCValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Transport_GRPCMultiError(errors)
	}

	return nil
}

// Transport_GRPCMultiError is an error wrapping multiple validation errors
// returned by Transport_GRPC.ValidateAll() if the designated constraints
// aren't met.
type Transport_GRPCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Transport_GRPCMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Transport_GRPCMultiError) AllErrors() []error { return m }

// Transport_GRPCValidationError is the validation error returned by
// Transport_GRPC.Validate if the designated constraints aren't met.
type Transport_GRPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Transport_GRPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Transport_GRPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Transport_GRPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Transport_GRPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Transport_GRPCValidationError) ErrorName() string { return "Transport_GRPCValidationError" }

// Error satisfies the builtin error interface
func (e Transport_GRPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransport_GRPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Transport_GRPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Transport_GRPCValidationError{}

var _Transport_GRPC_Network_InLookup = map[string]struct{}{
	"tcp":        {},
	"tcp4":       {},
	"tcp6":       {},
	"unix":       {},
	"unixpacket": {},
}

// Validate checks the field values on Transport_HTTP with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transport_HTTP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transport_HTTP with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Transport_HTTPMultiError,
// or nil if none found.
func (m *Transport_HTTP) ValidateAll() error {
	return m.validate(true)
}

func (m *Transport_HTTP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Transport_HTTP_Network_InLookup[m.GetNetwork()]; !ok {
		err := Transport_HTTPValidationError{
			field:  "Network",
			reason: "value must be in list [tcp tcp4 tcp6 unix unixpacket]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddr()) < 1 {
		err := Transport_HTTPValidationError{
			field:  "Addr",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Transport_HTTPValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Transport_HTTPValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Transport_HTTPValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShutdownTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Transport_HTTPValidationError{
					field:  "ShutdownTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Transport_HTTPValidationError{
					field:  "ShutdownTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShutdownTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Transport_HTTPValidationError{
				field:  "ShutdownTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Endpoint

	if m.GetMaxRecvMsgSize() <= 0 {
		err := Transport_HTTPValidationError{
			field:  "MaxRecvMsgSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxSendMsgSize() <= 0 {
		err := Transport_HTTPValidationError{
			field:  "MaxSendMsgSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Transport_HTTPValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Transport_HTTPValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Transport_HTTPValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Transport_HTTPMultiError(errors)
	}

	return nil
}

// Transport_HTTPMultiError is an error wrapping multiple validation errors
// returned by Transport_HTTP.ValidateAll() if the designated constraints
// aren't met.
type Transport_HTTPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Transport_HTTPMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Transport_HTTPMultiError) AllErrors() []error { return m }

// Transport_HTTPValidationError is the validation error returned by
// Transport_HTTP.Validate if the designated constraints aren't met.
type Transport_HTTPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Transport_HTTPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Transport_HTTPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Transport_HTTPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Transport_HTTPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Transport_HTTPValidationError) ErrorName() string { return "Transport_HTTPValidationError" }

// Error satisfies the builtin error interface
func (e Transport_HTTPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransport_HTTP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Transport_HTTPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Transport_HTTPValidationError{}

var _Transport_HTTP_Network_InLookup = map[string]struct{}{
	"tcp":        {},
	"tcp4":       {},
	"tcp6":       {},
	"unix":       {},
	"unixpacket": {},
}
