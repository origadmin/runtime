// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transport/v1/http.proto

package transportv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HTTPServer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HTTPServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTPServer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HTTPServerMultiError, or
// nil if none found.
func (m *HTTPServer) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HTTPServer_Network_InLookup[m.GetNetwork()]; !ok {
		err := HTTPServerValidationError{
			field:  "Network",
			reason: "value must be in list [tcp tcp4 tcp6 unix unixpacket]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddr()) < 1 {
		err := HTTPServerValidationError{
			field:  "Addr",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPServerValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPServerValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPServerValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShutdownTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPServerValidationError{
					field:  "ShutdownTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPServerValidationError{
					field:  "ShutdownTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShutdownTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPServerValidationError{
				field:  "ShutdownTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Endpoint

	if m.GetMaxRecvMsgSize() <= 0 {
		err := HTTPServerValidationError{
			field:  "MaxRecvMsgSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxSendMsgSize() <= 0 {
		err := HTTPServerValidationError{
			field:  "MaxSendMsgSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPServerValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPServerValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPServerValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HTTPServerMultiError(errors)
	}

	return nil
}

// HTTPServerMultiError is an error wrapping multiple validation errors
// returned by HTTPServer.ValidateAll() if the designated constraints aren't met.
type HTTPServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPServerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPServerMultiError) AllErrors() []error { return m }

// HTTPServerValidationError is the validation error returned by
// HTTPServer.Validate if the designated constraints aren't met.
type HTTPServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPServerValidationError) ErrorName() string { return "HTTPServerValidationError" }

// Error satisfies the builtin error interface
func (e HTTPServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPServerValidationError{}

var _HTTPServer_Network_InLookup = map[string]struct{}{
	"tcp":        {},
	"tcp4":       {},
	"tcp6":       {},
	"unix":       {},
	"unixpacket": {},
}

// Validate checks the field values on HTTPClient with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HTTPClient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTPClient with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HTTPClientMultiError, or
// nil if none found.
func (m *HTTPClient) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPClient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := HTTPClientValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPClientValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPClientValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPClientValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDialTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPClientValidationError{
					field:  "DialTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPClientValidationError{
					field:  "DialTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDialTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPClientValidationError{
				field:  "DialTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPClientValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPClientValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPClientValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HTTPClientMultiError(errors)
	}

	return nil
}

// HTTPClientMultiError is an error wrapping multiple validation errors
// returned by HTTPClient.ValidateAll() if the designated constraints aren't met.
type HTTPClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPClientMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPClientMultiError) AllErrors() []error { return m }

// HTTPClientValidationError is the validation error returned by
// HTTPClient.Validate if the designated constraints aren't met.
type HTTPClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPClientValidationError) ErrorName() string { return "HTTPClientValidationError" }

// Error satisfies the builtin error interface
func (e HTTPClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPClientValidationError{}
