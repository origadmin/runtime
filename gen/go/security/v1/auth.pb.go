// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: security/v1/auth.proto

package securityv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/google/gnostic/openapiv3"
	v11 "github.com/origadmin/runtime/gen/go/security/casbin/v1"
	v1 "github.com/origadmin/runtime/gen/go/security/jwt/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthN_Type int32

const (
	AuthN_TYPE_UNSPECIFIED AuthN_Type = 0 // default value not specified
	AuthN_TYPE_BASIC       AuthN_Type = 1 // Basic authentication
	AuthN_TYPE_BEARER      AuthN_Type = 2 // Bearer authentication
	AuthN_TYPE_DIGEST      AuthN_Type = 3 // Digest authentication
	AuthN_TYPE_OAUTH2      AuthN_Type = 4 // OAuth2 authentication
	AuthN_TYPE_API_KEY     AuthN_Type = 5 // API Key authentication
	AuthN_TYPE_JWT         AuthN_Type = 6 // JWT authentication
	// you can add more types as needed
	AuthN_TYPE_USER_ADDITIONAL AuthN_Type = 7
)

// Enum value maps for AuthN_Type.
var (
	AuthN_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_BASIC",
		2: "TYPE_BEARER",
		3: "TYPE_DIGEST",
		4: "TYPE_OAUTH2",
		5: "TYPE_API_KEY",
		6: "TYPE_JWT",
		7: "TYPE_USER_ADDITIONAL",
	}
	AuthN_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":     0,
		"TYPE_BASIC":           1,
		"TYPE_BEARER":          2,
		"TYPE_DIGEST":          3,
		"TYPE_OAUTH2":          4,
		"TYPE_API_KEY":         5,
		"TYPE_JWT":             6,
		"TYPE_USER_ADDITIONAL": 7,
	}
)

func (x AuthN_Type) Enum() *AuthN_Type {
	p := new(AuthN_Type)
	*p = x
	return p
}

func (x AuthN_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthN_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_security_v1_auth_proto_enumTypes[0].Descriptor()
}

func (AuthN_Type) Type() protoreflect.EnumType {
	return &file_security_v1_auth_proto_enumTypes[0]
}

func (x AuthN_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthN_Type.Descriptor instead.
func (AuthN_Type) EnumDescriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{6, 0}
}

type BasicAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *BasicAuth) Reset() {
	*x = BasicAuth{}
	mi := &file_security_v1_auth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuth) ProtoMessage() {}

func (x *BasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuth.ProtoReflect.Descriptor instead.
func (*BasicAuth) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{0}
}

func (x *BasicAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BasicAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type BearerAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *BearerAuth) Reset() {
	*x = BearerAuth{}
	mi := &file_security_v1_auth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BearerAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerAuth) ProtoMessage() {}

func (x *BearerAuth) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerAuth.ProtoReflect.Descriptor instead.
func (*BearerAuth) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{1}
}

func (x *BearerAuth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DigestAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Realm     string `protobuf:"bytes,2,opt,name=realm,proto3" json:"realm,omitempty"`
	Nonce     string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Uri       string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	Response  string `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
	Algorithm string `protobuf:"bytes,6,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Qop       string `protobuf:"bytes,7,opt,name=qop,proto3" json:"qop,omitempty"`
	Nc        string `protobuf:"bytes,8,opt,name=nc,proto3" json:"nc,omitempty"`
	Cnonce    string `protobuf:"bytes,9,opt,name=cnonce,proto3" json:"cnonce,omitempty"`
}

func (x *DigestAuth) Reset() {
	*x = DigestAuth{}
	mi := &file_security_v1_auth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigestAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigestAuth) ProtoMessage() {}

func (x *DigestAuth) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigestAuth.ProtoReflect.Descriptor instead.
func (*DigestAuth) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{2}
}

func (x *DigestAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DigestAuth) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *DigestAuth) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DigestAuth) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DigestAuth) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *DigestAuth) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *DigestAuth) GetQop() string {
	if x != nil {
		return x.Qop
	}
	return ""
}

func (x *DigestAuth) GetNc() string {
	if x != nil {
		return x.Nc
	}
	return ""
}

func (x *DigestAuth) GetCnonce() string {
	if x != nil {
		return x.Cnonce
	}
	return ""
}

type OAuth2Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string   `protobuf:"bytes,1,opt,name=access_token,proto3" json:"access_token,omitempty"`
	TokenType    string   `protobuf:"bytes,2,opt,name=token_type,proto3" json:"token_type,omitempty"`
	ExpiresIn    int32    `protobuf:"varint,3,opt,name=expires_in,proto3" json:"expires_in,omitempty"`
	RefreshToken string   `protobuf:"bytes,4,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"`
	Scope        []string `protobuf:"bytes,5,rep,name=scope,proto3" json:"scope,omitempty"`
}

func (x *OAuth2Auth) Reset() {
	*x = OAuth2Auth{}
	mi := &file_security_v1_auth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuth2Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2Auth) ProtoMessage() {}

func (x *OAuth2Auth) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2Auth.ProtoReflect.Descriptor instead.
func (*OAuth2Auth) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{3}
}

func (x *OAuth2Auth) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *OAuth2Auth) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *OAuth2Auth) GetExpiresIn() int32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *OAuth2Auth) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *OAuth2Auth) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

type ApiKeyAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=api_key,proto3" json:"api_key,omitempty"`
}

func (x *ApiKeyAuth) Reset() {
	*x = ApiKeyAuth{}
	mi := &file_security_v1_auth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyAuth) ProtoMessage() {}

func (x *ApiKeyAuth) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyAuth.ProtoReflect.Descriptor instead.
func (*ApiKeyAuth) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{4}
}

func (x *ApiKeyAuth) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type JwtAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string    `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	JwtToken *v1.Token `protobuf:"bytes,2,opt,name=jwt_token,proto3" json:"jwt_token,omitempty"`
	Claims   *Claims   `protobuf:"bytes,20,opt,name=claims,proto3" json:"claims,omitempty"` // Claims
}

func (x *JwtAuth) Reset() {
	*x = JwtAuth{}
	mi := &file_security_v1_auth_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JwtAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtAuth) ProtoMessage() {}

func (x *JwtAuth) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtAuth.ProtoReflect.Descriptor instead.
func (*JwtAuth) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{5}
}

func (x *JwtAuth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JwtAuth) GetJwtToken() *v1.Token {
	if x != nil {
		return x.JwtToken
	}
	return nil
}

func (x *JwtAuth) GetClaims() *Claims {
	if x != nil {
		return x.Claims
	}
	return nil
}

type AuthN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       AuthN_Type  `protobuf:"varint,1,opt,name=type,proto3,enum=security.v1.AuthN_Type" json:"type,omitempty"`
	Basic      *BasicAuth  `protobuf:"bytes,10,opt,name=basic,proto3,oneof" json:"basic,omitempty"`
	Bearer     *BearerAuth `protobuf:"bytes,11,opt,name=bearer,proto3,oneof" json:"bearer,omitempty"`
	Digest     *DigestAuth `protobuf:"bytes,12,opt,name=digest,proto3,oneof" json:"digest,omitempty"`
	Oauth2     *OAuth2Auth `protobuf:"bytes,13,opt,name=oauth2,proto3,oneof" json:"oauth2,omitempty"`
	ApiKey     *ApiKeyAuth `protobuf:"bytes,14,opt,name=api_key,proto3,oneof" json:"api_key,omitempty"`
	Jwt        *JwtAuth    `protobuf:"bytes,15,opt,name=jwt,proto3,oneof" json:"jwt,omitempty"`
	Additional *anypb.Any  `protobuf:"bytes,16,opt,name=additional,proto3,oneof" json:"additional,omitempty"`
}

func (x *AuthN) Reset() {
	*x = AuthN{}
	mi := &file_security_v1_auth_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthN) ProtoMessage() {}

func (x *AuthN) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthN.ProtoReflect.Descriptor instead.
func (*AuthN) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{6}
}

func (x *AuthN) GetType() AuthN_Type {
	if x != nil {
		return x.Type
	}
	return AuthN_TYPE_UNSPECIFIED
}

func (x *AuthN) GetBasic() *BasicAuth {
	if x != nil {
		return x.Basic
	}
	return nil
}

func (x *AuthN) GetBearer() *BearerAuth {
	if x != nil {
		return x.Bearer
	}
	return nil
}

func (x *AuthN) GetDigest() *DigestAuth {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *AuthN) GetOauth2() *OAuth2Auth {
	if x != nil {
		return x.Oauth2
	}
	return nil
}

func (x *AuthN) GetApiKey() *ApiKeyAuth {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *AuthN) GetJwt() *JwtAuth {
	if x != nil {
		return x.Jwt
	}
	return nil
}

func (x *AuthN) GetAdditional() *anypb.Any {
	if x != nil {
		return x.Additional
	}
	return nil
}

type CasbinAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *v11.Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Claims *Claims     `protobuf:"bytes,20,opt,name=claims,proto3" json:"claims,omitempty"` // Claims
}

func (x *CasbinAuth) Reset() {
	*x = CasbinAuth{}
	mi := &file_security_v1_auth_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CasbinAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CasbinAuth) ProtoMessage() {}

func (x *CasbinAuth) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CasbinAuth.ProtoReflect.Descriptor instead.
func (*CasbinAuth) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{7}
}

func (x *CasbinAuth) GetPolicy() *v11.Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *CasbinAuth) GetClaims() *Claims {
	if x != nil {
		return x.Claims
	}
	return nil
}

type AuthZ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root      bool                   `protobuf:"varint,1,opt,name=root,proto3" json:"root,omitempty"`
	Id        string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	UserType  string                 `protobuf:"bytes,3,opt,name=user_type,proto3" json:"user_type,omitempty"`
	Username  string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Roles     []string               `protobuf:"bytes,5,rep,name=roles,proto3" json:"roles,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Casbin    *CasbinAuth            `protobuf:"bytes,7,opt,name=casbin,proto3" json:"casbin,omitempty"`
}

func (x *AuthZ) Reset() {
	*x = AuthZ{}
	mi := &file_security_v1_auth_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthZ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthZ) ProtoMessage() {}

func (x *AuthZ) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthZ.ProtoReflect.Descriptor instead.
func (*AuthZ) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{8}
}

func (x *AuthZ) GetRoot() bool {
	if x != nil {
		return x.Root
	}
	return false
}

func (x *AuthZ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthZ) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *AuthZ) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthZ) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AuthZ) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AuthZ) GetCasbin() *CasbinAuth {
	if x != nil {
		return x.Casbin
	}
	return nil
}

type Claims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub    string                 `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`                                                                                                // Subject
	Iss    string                 `protobuf:"bytes,2,opt,name=iss,proto3" json:"iss,omitempty"`                                                                                                // Issuer
	Aud    []string               `protobuf:"bytes,3,rep,name=aud,proto3" json:"aud,omitempty"`                                                                                                // Audience
	Exp    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=exp,proto3" json:"exp,omitempty"`                                                                                                // Expiration Time
	Nbf    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=nbf,proto3" json:"nbf,omitempty"`                                                                                                // Not Before
	Iat    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=iat,proto3" json:"iat,omitempty"`                                                                                                // Issued At
	Jti    string                 `protobuf:"bytes,7,opt,name=jti,proto3" json:"jti,omitempty"`                                                                                                // JWT ID
	Scopes map[string]bool        `protobuf:"bytes,8,rep,name=scopes,proto3" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Scopes
}

func (x *Claims) Reset() {
	*x = Claims{}
	mi := &file_security_v1_auth_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Claims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claims) ProtoMessage() {}

func (x *Claims) ProtoReflect() protoreflect.Message {
	mi := &file_security_v1_auth_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claims.ProtoReflect.Descriptor instead.
func (*Claims) Descriptor() ([]byte, []int) {
	return file_security_v1_auth_proto_rawDescGZIP(), []int{9}
}

func (x *Claims) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *Claims) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

func (x *Claims) GetAud() []string {
	if x != nil {
		return x.Aud
	}
	return nil
}

func (x *Claims) GetExp() *timestamppb.Timestamp {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *Claims) GetNbf() *timestamppb.Timestamp {
	if x != nil {
		return x.Nbf
	}
	return nil
}

func (x *Claims) GetIat() *timestamppb.Timestamp {
	if x != nil {
		return x.Iat
	}
	return nil
}

func (x *Claims) GetJti() string {
	if x != nil {
		return x.Jti
	}
	return ""
}

func (x *Claims) GetScopes() map[string]bool {
	if x != nil {
		return x.Scopes
	}
	return nil
}

var File_security_v1_auth_proto protoreflect.FileDescriptor

var file_security_v1_auth_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2f, 0x6a, 0x77, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad,
	0x01, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x29, 0x92, 0x02, 0x26, 0x54, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x33, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x29, 0x92, 0x02, 0x26, 0x54, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x55,
	0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x27, 0x92, 0x02, 0x24, 0x54, 0x68, 0x65, 0x20, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf2, 0x04, 0x0a, 0x0a, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba,
	0x47, 0x2a, 0x92, 0x02, 0x27, 0x54, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47,
	0x1c, 0x92, 0x02, 0x19, 0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x2e, 0x52, 0x05, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x12, 0x3e, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x1e, 0x92,
	0x02, 0x1b, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x1f, 0x92, 0x02, 0x1c,
	0x54, 0x68, 0x65, 0x20, 0x55, 0x52, 0x49, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x47, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x21, 0x92,
	0x02, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x30, 0x92, 0x02, 0x2d, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x2c, 0x20, 0x65,
	0x2e, 0x67, 0x2e, 0x2c, 0x20, 0x4d, 0x44, 0x35, 0x2e, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x4d, 0x0a, 0x03, 0x71, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x31, 0x92, 0x02, 0x2e,
	0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c,
	0x20, 0x65, 0x2e, 0x67, 0x2e, 0x2c, 0x20, 0x27, 0x61, 0x75, 0x74, 0x68, 0x27, 0x2e, 0x52, 0x03,
	0x71, 0x6f, 0x70, 0x12, 0x2d, 0x0a, 0x02, 0x6e, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x13, 0x92, 0x02, 0x10, 0x54, 0x68,
	0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x02,
	0x6e, 0x63, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x14, 0x92, 0x02,
	0x11, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x2e, 0x52, 0x06, 0x63, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x0a, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x41, 0x75, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x25, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0x54, 0x68,
	0x65, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5a, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0xba, 0x47, 0x30, 0x92, 0x02, 0x2d, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x2c, 0x20, 0x27, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x27, 0x2e, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x59, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x39, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0xba, 0x47, 0x2f,
	0x92, 0x02, 0x2c, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x1c, 0x92, 0x02,
	0x19, 0x54, 0x68, 0x65, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0xba, 0x47, 0x22, 0x92, 0x02, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x54,
	0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x22, 0x92, 0x02, 0x1f, 0x54, 0x68, 0x65, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x22, 0x89, 0x02, 0x0a, 0x07, 0x4a, 0x77, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x44, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x24, 0x92, 0x02, 0x21, 0x54, 0x68,
	0x65, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x62, 0x0a, 0x09, 0x6a, 0x77, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x6a, 0x77, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x2c, 0xba, 0x47, 0x29, 0x92, 0x02, 0x26, 0x54, 0x68, 0x65, 0x20, 0x4a, 0x57, 0x54,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x09, 0x6a, 0x77, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x54, 0x0a, 0x06, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x42,
	0x27, 0xba, 0x47, 0x24, 0x92, 0x02, 0x21, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x20, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x22, 0xac, 0x08, 0x0a, 0x05, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x12, 0x95, 0x01, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x68, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0xba, 0x47, 0x5d, 0x92,
	0x02, 0x5a, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x65, 0x2e,
	0x67, 0x2e, 0x2c, 0x20, 0x27, 0x62, 0x61, 0x73, 0x69, 0x63, 0x27, 0x2c, 0x20, 0x27, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x27, 0x2c, 0x20, 0x27, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x27, 0x2c,
	0x20, 0x27, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x27, 0x2c, 0x20, 0x27, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x27, 0x2c, 0x20, 0x27, 0x6a, 0x77, 0x74, 0x27, 0x2e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x5a, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x42, 0x27, 0xba, 0x47, 0x24, 0x92, 0x02,
	0x21, 0x54, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x5e,
	0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x42, 0x28, 0xba, 0x47, 0x25, 0x92, 0x02, 0x22, 0x54,
	0x68, 0x65, 0x20, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x48, 0x01, 0x52, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5e,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x42, 0x28, 0xba, 0x47, 0x25, 0x92, 0x02, 0x22, 0x54,
	0x68, 0x65, 0x20, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x48, 0x02, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5e,
	0x0a, 0x06, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x41, 0x75, 0x74, 0x68, 0x42, 0x28, 0xba, 0x47, 0x25, 0x92, 0x02, 0x22, 0x54,
	0x68, 0x65, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x48, 0x03, 0x52, 0x06, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x88, 0x01, 0x01, 0x12, 0x61,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x42, 0x29, 0xba, 0x47, 0x26, 0x92, 0x02, 0x23,
	0x54, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x48, 0x04, 0x52, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x77, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x42, 0x25, 0xba, 0x47, 0x22, 0x92, 0x02, 0x1f, 0x54, 0x68, 0x65, 0x20,
	0x4a, 0x57, 0x54, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x48, 0x05, 0x52, 0x03, 0x6a,
	0x77, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42,
	0x33, 0xba, 0x47, 0x30, 0x92, 0x02, 0x2d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x06, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x41,
	0x52, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49,
	0x47, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x41, 0x55, 0x54, 0x48, 0x32, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4a, 0x57, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x07, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x77, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0xd2, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x12, 0x6e,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x3a, 0xba, 0x47, 0x37, 0x92,
	0x02, 0x34, 0x54, 0x68, 0x65, 0x20, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x54,
	0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x42, 0x27, 0xba, 0x47, 0x24, 0x92, 0x02, 0x21, 0x54, 0x68, 0x65, 0x20, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x20, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x06, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x22, 0xb4, 0x04, 0x0a, 0x05, 0x41, 0x75, 0x74, 0x68, 0x5a, 0x12, 0x44,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30, 0xba, 0x47,
	0x2d, 0x92, 0x02, 0x2a, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x72, 0x6f,
	0x6f, 0x74, 0x20, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xba, 0x47, 0x25, 0x92, 0x02, 0x22, 0x54, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x72,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x54, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x52, 0x05, 0x67, 0x75, 0x65, 0x73, 0x74, 0xba, 0x47, 0x38, 0x92,
	0x02, 0x35, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x27, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x27, 0x2c, 0x20, 0x27, 0x75, 0x73, 0x65, 0x72, 0x27, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x27,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x27, 0x2e, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0x92, 0x02, 0x19, 0x54, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x25,
	0xba, 0x47, 0x22, 0x92, 0x02, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x29, 0xba, 0x47, 0x26,
	0x92, 0x02, 0x23, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x58, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x27, 0xba, 0x47, 0x24, 0x92,
	0x02, 0x21, 0x54, 0x68, 0x65, 0x20, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x52, 0x06, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x22, 0xcf, 0x05, 0x0a, 0x06,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x1c, 0x92,
	0x02, 0x19, 0x54, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x03, 0x73, 0x75, 0x62,
	0x12, 0x37, 0x0a, 0x03, 0x69, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0x54, 0x68, 0x65, 0x20,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x03, 0x69, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x03, 0x61, 0x75, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3b, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0xba, 0x47, 0x30, 0x92, 0x02, 0x2d, 0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x2e, 0x52, 0x03, 0x61, 0x75, 0x64, 0x12, 0x55, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x27, 0xba, 0x47, 0x24, 0x92, 0x02, 0x21, 0x54, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12,
	0x69, 0x0a, 0x03, 0x6e, 0x62, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3b, 0xba, 0x47, 0x38, 0x92, 0x02, 0x35,
	0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x2e, 0x52, 0x03, 0x6e, 0x62, 0x66, 0x12, 0x5b, 0x0a, 0x03, 0x69, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x2d, 0xba, 0x47, 0x2a, 0x92, 0x02, 0x27, 0x54, 0x68, 0x65, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x61, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x2e, 0x52, 0x03, 0x69, 0x61, 0x74, 0x12, 0x43, 0x0a, 0x03, 0x6a, 0x74, 0x69, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x27,
	0x92, 0x02, 0x24, 0x54, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x03, 0x6a, 0x74, 0x69, 0x12, 0x64, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2b, 0xba,
	0x47, 0x28, 0x92, 0x02, 0x25, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xa8, 0x01,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x42, 0x09, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x3b,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x76, 0x31, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03,
	0x53, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x17, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_security_v1_auth_proto_rawDescOnce sync.Once
	file_security_v1_auth_proto_rawDescData = file_security_v1_auth_proto_rawDesc
)

func file_security_v1_auth_proto_rawDescGZIP() []byte {
	file_security_v1_auth_proto_rawDescOnce.Do(func() {
		file_security_v1_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_security_v1_auth_proto_rawDescData)
	})
	return file_security_v1_auth_proto_rawDescData
}

var file_security_v1_auth_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_security_v1_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_security_v1_auth_proto_goTypes = []any{
	(AuthN_Type)(0),               // 0: security.v1.AuthN.Type
	(*BasicAuth)(nil),             // 1: security.v1.BasicAuth
	(*BearerAuth)(nil),            // 2: security.v1.BearerAuth
	(*DigestAuth)(nil),            // 3: security.v1.DigestAuth
	(*OAuth2Auth)(nil),            // 4: security.v1.OAuth2Auth
	(*ApiKeyAuth)(nil),            // 5: security.v1.ApiKeyAuth
	(*JwtAuth)(nil),               // 6: security.v1.JwtAuth
	(*AuthN)(nil),                 // 7: security.v1.AuthN
	(*CasbinAuth)(nil),            // 8: security.v1.CasbinAuth
	(*AuthZ)(nil),                 // 9: security.v1.AuthZ
	(*Claims)(nil),                // 10: security.v1.Claims
	nil,                           // 11: security.v1.Claims.ScopesEntry
	(*v1.Token)(nil),              // 12: security.jwt.v1.Token
	(*anypb.Any)(nil),             // 13: google.protobuf.Any
	(*v11.Policy)(nil),            // 14: security.casbin.v1.Policy
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
}
var file_security_v1_auth_proto_depIdxs = []int32{
	12, // 0: security.v1.JwtAuth.jwt_token:type_name -> security.jwt.v1.Token
	10, // 1: security.v1.JwtAuth.claims:type_name -> security.v1.Claims
	0,  // 2: security.v1.AuthN.type:type_name -> security.v1.AuthN.Type
	1,  // 3: security.v1.AuthN.basic:type_name -> security.v1.BasicAuth
	2,  // 4: security.v1.AuthN.bearer:type_name -> security.v1.BearerAuth
	3,  // 5: security.v1.AuthN.digest:type_name -> security.v1.DigestAuth
	4,  // 6: security.v1.AuthN.oauth2:type_name -> security.v1.OAuth2Auth
	5,  // 7: security.v1.AuthN.api_key:type_name -> security.v1.ApiKeyAuth
	6,  // 8: security.v1.AuthN.jwt:type_name -> security.v1.JwtAuth
	13, // 9: security.v1.AuthN.additional:type_name -> google.protobuf.Any
	14, // 10: security.v1.CasbinAuth.policy:type_name -> security.casbin.v1.Policy
	10, // 11: security.v1.CasbinAuth.claims:type_name -> security.v1.Claims
	15, // 12: security.v1.AuthZ.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 13: security.v1.AuthZ.casbin:type_name -> security.v1.CasbinAuth
	15, // 14: security.v1.Claims.exp:type_name -> google.protobuf.Timestamp
	15, // 15: security.v1.Claims.nbf:type_name -> google.protobuf.Timestamp
	15, // 16: security.v1.Claims.iat:type_name -> google.protobuf.Timestamp
	11, // 17: security.v1.Claims.scopes:type_name -> security.v1.Claims.ScopesEntry
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_security_v1_auth_proto_init() }
func file_security_v1_auth_proto_init() {
	if File_security_v1_auth_proto != nil {
		return
	}
	file_security_v1_auth_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_security_v1_auth_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_security_v1_auth_proto_goTypes,
		DependencyIndexes: file_security_v1_auth_proto_depIdxs,
		EnumInfos:         file_security_v1_auth_proto_enumTypes,
		MessageInfos:      file_security_v1_auth_proto_msgTypes,
	}.Build()
	File_security_v1_auth_proto = out.File
	file_security_v1_auth_proto_rawDesc = nil
	file_security_v1_auth_proto_goTypes = nil
	file_security_v1_auth_proto_depIdxs = nil
}
