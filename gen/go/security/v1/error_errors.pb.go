// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package securityv1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsAuthErrorReasonUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_UNSPECIFIED.String() && e.Code == 500
}

func ErrorAuthErrorReasonUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonInvalidClaims(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_INVALID_CLAIMS.String() && e.Code == 500
}

func ErrorAuthErrorReasonInvalidClaims(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_INVALID_CLAIMS.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonInvalidBearerToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_INVALID_BEARER_TOKEN.String() && e.Code == 500
}

func ErrorAuthErrorReasonInvalidBearerToken(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_INVALID_BEARER_TOKEN.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonInvalidSubject(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_INVALID_SUBJECT.String() && e.Code == 500
}

func ErrorAuthErrorReasonInvalidSubject(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_INVALID_SUBJECT.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonInvalidAudience(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_INVALID_AUDIENCE.String() && e.Code == 500
}

func ErrorAuthErrorReasonInvalidAudience(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_INVALID_AUDIENCE.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonInvalidIssuer(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_INVALID_ISSUER.String() && e.Code == 500
}

func ErrorAuthErrorReasonInvalidIssuer(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_INVALID_ISSUER.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonInvalidExpiration(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_INVALID_EXPIRATION.String() && e.Code == 500
}

func ErrorAuthErrorReasonInvalidExpiration(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_INVALID_EXPIRATION.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonTokenNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_TOKEN_NOT_FOUND.String() && e.Code == 500
}

func ErrorAuthErrorReasonTokenNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_TOKEN_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonBearerTokenMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_BEARER_TOKEN_MISSING.String() && e.Code == 500
}

func ErrorAuthErrorReasonBearerTokenMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_BEARER_TOKEN_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_TOKEN_EXPIRED.String() && e.Code == 500
}

func ErrorAuthErrorReasonTokenExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_TOKEN_EXPIRED.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonUnsupportedSigningMethod(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_UNSUPPORTED_SIGNING_METHOD.String() && e.Code == 500
}

func ErrorAuthErrorReasonUnsupportedSigningMethod(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_UNSUPPORTED_SIGNING_METHOD.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonMissingKeyFunc(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_MISSING_KEY_FUNC.String() && e.Code == 500
}

func ErrorAuthErrorReasonMissingKeyFunc(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_MISSING_KEY_FUNC.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonSignTokenFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_SIGN_TOKEN_FAILED.String() && e.Code == 500
}

func ErrorAuthErrorReasonSignTokenFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_SIGN_TOKEN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonGetKeyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_GET_KEY_FAILED.String() && e.Code == 500
}

func ErrorAuthErrorReasonGetKeyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_GET_KEY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonNoAtHash(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_NO_AT_HASH.String() && e.Code == 500
}

func ErrorAuthErrorReasonNoAtHash(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_NO_AT_HASH.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonInvalidAtHash(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_INVALID_AT_HASH.String() && e.Code == 500
}

func ErrorAuthErrorReasonInvalidAtHash(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_INVALID_AT_HASH.String(), fmt.Sprintf(format, args...))
}

func IsAuthErrorReasonUnauthenticated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_AUTH_ERROR_REASON_UNAUTHENTICATED.String() && e.Code == 500
}

func ErrorAuthErrorReasonUnauthenticated(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_AUTH_ERROR_REASON_UNAUTHENTICATED.String(), fmt.Sprintf(format, args...))
}
