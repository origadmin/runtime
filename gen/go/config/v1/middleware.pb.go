// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: config/v1/middleware.proto

package configv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of indicator (e.g. counter, timer, histogram, etc.)
type UserMetric_MetricType int32

const (
	UserMetric_COUNTER   UserMetric_MetricType = 0
	UserMetric_GAUGE     UserMetric_MetricType = 1
	UserMetric_HISTOGRAM UserMetric_MetricType = 2
	UserMetric_SUMMARY   UserMetric_MetricType = 3
)

// Enum value maps for UserMetric_MetricType.
var (
	UserMetric_MetricType_name = map[int32]string{
		0: "COUNTER",
		1: "GAUGE",
		2: "HISTOGRAM",
		3: "SUMMARY",
	}
	UserMetric_MetricType_value = map[string]int32{
		"COUNTER":   0,
		"GAUGE":     1,
		"HISTOGRAM": 2,
		"SUMMARY":   3,
	}
)

func (x UserMetric_MetricType) Enum() *UserMetric_MetricType {
	p := new(UserMetric_MetricType)
	*p = x
	return p
}

func (x UserMetric_MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserMetric_MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_middleware_proto_enumTypes[0].Descriptor()
}

func (UserMetric_MetricType) Type() protoreflect.EnumType {
	return &file_config_v1_middleware_proto_enumTypes[0]
}

func (x UserMetric_MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserMetric_MetricType.Descriptor instead.
func (UserMetric_MetricType) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{0, 0}
}

// UserMetric: used to report user-defined metrics
// Example:
//
//	request_count := UserMetric {
//	  timestamp: 1633072800,
//	  name: "request_count",
//	  value: 12345,
//	  labels: {
//	    "service": "api_service",
//	    "endpoint": "/users"
//	  },
//	  unit: "requests",
//	  type: COUNTER,
//	  description: "Number of requests to the API service",
//	  context: "Production environment",
//	  metadata: {
//	    "region": "us-west-1",
//	    "instance_id": "i-0123456789abcdef0"
//	  }
//	};
//
//	response_time := UserMetric {
//	  timestamp: 1633072800,
//	  name: "response_time",
//	  value: 0.25,
//	  labels: {
//	    "service": "api_service",
//	    "endpoint": "/users"
//	  },
//	  unit: "seconds",
//	  type: GAUGE,
//	  description: "Average response time of the API service",
//	  context: "Production environment",
//	  metadata: {
//	    "region": "us-west-1",
//	    "instance_id": "i-0123456789abcdef0"
//	  }
//	};
type UserMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp: indicates the time of indicator data
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Indicator name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Indicator value
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	// Indicator label for classification or filtering
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Indicator unit
	Unit string                `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	Type UserMetric_MetricType `protobuf:"varint,6,opt,name=type,proto3,enum=config.v1.UserMetric_MetricType" json:"type,omitempty"`
	// Description of indicators
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Indicator context information
	Context string `protobuf:"bytes,8,opt,name=context,proto3" json:"context,omitempty"`
	// Additional information for metrics that can be used to store arbitrary metadata
	Metadata map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserMetric) Reset() {
	*x = UserMetric{}
	mi := &file_config_v1_middleware_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetric) ProtoMessage() {}

func (x *UserMetric) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetric.ProtoReflect.Descriptor instead.
func (*UserMetric) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{0}
}

func (x *UserMetric) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UserMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserMetric) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserMetric) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UserMetric) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *UserMetric) GetType() UserMetric_MetricType {
	if x != nil {
		return x.Type
	}
	return UserMetric_COUNTER
}

func (x *UserMetric) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UserMetric) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *UserMetric) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Security middleware config.
type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Direct release paths
	DirectReleasePaths []string `protobuf:"bytes,2,rep,name=direct_release_paths,proto3" json:"direct_release_paths,omitempty"`
	// JWT config for authorization
	Jwt *Security_JWT `protobuf:"bytes,5,opt,name=jwt,proto3" json:"jwt,omitempty"`
	// Casbin config for authorization
	Casbin *Security_Casbin `protobuf:"bytes,6,opt,name=casbin,proto3" json:"casbin,omitempty"`
}

func (x *Security) Reset() {
	*x = Security{}
	mi := &file_config_v1_middleware_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{1}
}

func (x *Security) GetDirectReleasePaths() []string {
	if x != nil {
		return x.DirectReleasePaths
	}
	return nil
}

func (x *Security) GetJwt() *Security_JWT {
	if x != nil {
		return x.Jwt
	}
	return nil
}

func (x *Security) GetCasbin() *Security_Casbin {
	if x != nil {
		return x.Casbin
	}
	return nil
}

// Middleware config is used to configure middleware for entry
type Middleware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logging switch
	EnableLogging bool `protobuf:"varint,1,opt,name=enable_logging,json=enableLogging,proto3" json:"enable_logging,omitempty"`
	// Recovery switch
	EnableRecovery bool `protobuf:"varint,2,opt,name=enable_recovery,json=enableRecovery,proto3" json:"enable_recovery,omitempty"`
	// Metrics switch
	EnableTracing bool `protobuf:"varint,3,opt,name=enable_tracing,json=enableTracing,proto3" json:"enable_tracing,omitempty"`
	// Validation switch
	EnableValidate bool `protobuf:"varint,4,opt,name=enable_validate,json=enableValidate,proto3" json:"enable_validate,omitempty"`
	// Circuit breaker switch
	EnableCircuitBreaker bool `protobuf:"varint,5,opt,name=enable_circuit_breaker,json=enableCircuitBreaker,proto3" json:"enable_circuit_breaker,omitempty"`
	// Metadata switch
	EnableMetadata bool                    `protobuf:"varint,6,opt,name=enable_metadata,json=enableMetadata,proto3" json:"enable_metadata,omitempty"`
	RateLimiter    *Middleware_RateLimiter `protobuf:"bytes,100,opt,name=rate_limiter,proto3" json:"rate_limiter,omitempty"`
	Metadata       *Middleware_Metadata    `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Metrics        *Middleware_Metrics     `protobuf:"bytes,200,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Validator      *Middleware_Validator   `protobuf:"bytes,201,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (x *Middleware) Reset() {
	*x = Middleware{}
	mi := &file_config_v1_middleware_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Middleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware) ProtoMessage() {}

func (x *Middleware) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware.ProtoReflect.Descriptor instead.
func (*Middleware) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{2}
}

func (x *Middleware) GetEnableLogging() bool {
	if x != nil {
		return x.EnableLogging
	}
	return false
}

func (x *Middleware) GetEnableRecovery() bool {
	if x != nil {
		return x.EnableRecovery
	}
	return false
}

func (x *Middleware) GetEnableTracing() bool {
	if x != nil {
		return x.EnableTracing
	}
	return false
}

func (x *Middleware) GetEnableValidate() bool {
	if x != nil {
		return x.EnableValidate
	}
	return false
}

func (x *Middleware) GetEnableCircuitBreaker() bool {
	if x != nil {
		return x.EnableCircuitBreaker
	}
	return false
}

func (x *Middleware) GetEnableMetadata() bool {
	if x != nil {
		return x.EnableMetadata
	}
	return false
}

func (x *Middleware) GetRateLimiter() *Middleware_RateLimiter {
	if x != nil {
		return x.RateLimiter
	}
	return nil
}

func (x *Middleware) GetMetadata() *Middleware_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Middleware) GetMetrics() *Middleware_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Middleware) GetValidator() *Middleware_Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

// Casbin middleware config
type Security_Casbin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policy file
	PolicyFile string `protobuf:"bytes,3,opt,name=policy_file,proto3" json:"policy_file,omitempty"`
	// Model file
	ModelFile string `protobuf:"bytes,4,opt,name=model_file,proto3" json:"model_file,omitempty"`
}

func (x *Security_Casbin) Reset() {
	*x = Security_Casbin{}
	mi := &file_config_v1_middleware_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Security_Casbin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security_Casbin) ProtoMessage() {}

func (x *Security_Casbin) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security_Casbin.ProtoReflect.Descriptor instead.
func (*Security_Casbin) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Security_Casbin) GetPolicyFile() string {
	if x != nil {
		return x.PolicyFile
	}
	return ""
}

func (x *Security_Casbin) GetModelFile() string {
	if x != nil {
		return x.ModelFile
	}
	return ""
}

// Authorization middleware config
type Security_JWT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signing method
	SigningMethod string `protobuf:"bytes,3,opt,name=signing_method,proto3" json:"signing_method,omitempty"`
	// Signing key
	SigningKey string `protobuf:"bytes,4,opt,name=signing_key,proto3" json:"signing_key,omitempty"`
	// Old signing key
	OldSigningKey string `protobuf:"bytes,5,opt,name=old_signing_key,proto3" json:"old_signing_key,omitempty"`
	// Token expiration time
	ExpiredTime *durationpb.Duration `protobuf:"bytes,6,opt,name=expired_time,proto3" json:"expired_time,omitempty"`
}

func (x *Security_JWT) Reset() {
	*x = Security_JWT{}
	mi := &file_config_v1_middleware_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Security_JWT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security_JWT) ProtoMessage() {}

func (x *Security_JWT) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security_JWT.ProtoReflect.Descriptor instead.
func (*Security_JWT) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Security_JWT) GetSigningMethod() string {
	if x != nil {
		return x.SigningMethod
	}
	return ""
}

func (x *Security_JWT) GetSigningKey() string {
	if x != nil {
		return x.SigningKey
	}
	return ""
}

func (x *Security_JWT) GetOldSigningKey() string {
	if x != nil {
		return x.OldSigningKey
	}
	return ""
}

func (x *Security_JWT) GetExpiredTime() *durationpb.Duration {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// Rate limiter
type Middleware_RateLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rate limiter name, supported: bbr, memory, redis.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The number of seconds in a rate limit window
	Period int64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// The number of requests allowed in a window of time
	XRatelimitLimit int64 `protobuf:"varint,5,opt,name=x_ratelimit_limit,proto3" json:"x_ratelimit_limit,omitempty"`
	// The number of requests that can still be made in the current window of time
	XRatelimitRemaining int64 `protobuf:"varint,6,opt,name=x_ratelimit_remaining,proto3" json:"x_ratelimit_remaining,omitempty"`
	// The number of seconds until the current rate limit window completely resets
	XRatelimitReset int64 `protobuf:"varint,7,opt,name=x_ratelimit_reset,proto3" json:"x_ratelimit_reset,omitempty"`
	// When rate limited, the number of seconds to wait before another request will be accepted
	RetryAfter int64                          `protobuf:"varint,8,opt,name=retry_after,proto3" json:"retry_after,omitempty"`
	Memory     *Middleware_RateLimiter_Memory `protobuf:"bytes,101,opt,name=memory,proto3" json:"memory,omitempty"`
	Redis      *Middleware_RateLimiter_Redis  `protobuf:"bytes,102,opt,name=redis,proto3" json:"redis,omitempty"`
}

func (x *Middleware_RateLimiter) Reset() {
	*x = Middleware_RateLimiter{}
	mi := &file_config_v1_middleware_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Middleware_RateLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_RateLimiter) ProtoMessage() {}

func (x *Middleware_RateLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_RateLimiter.ProtoReflect.Descriptor instead.
func (*Middleware_RateLimiter) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Middleware_RateLimiter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Middleware_RateLimiter) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Middleware_RateLimiter) GetXRatelimitLimit() int64 {
	if x != nil {
		return x.XRatelimitLimit
	}
	return 0
}

func (x *Middleware_RateLimiter) GetXRatelimitRemaining() int64 {
	if x != nil {
		return x.XRatelimitRemaining
	}
	return 0
}

func (x *Middleware_RateLimiter) GetXRatelimitReset() int64 {
	if x != nil {
		return x.XRatelimitReset
	}
	return 0
}

func (x *Middleware_RateLimiter) GetRetryAfter() int64 {
	if x != nil {
		return x.RetryAfter
	}
	return 0
}

func (x *Middleware_RateLimiter) GetMemory() *Middleware_RateLimiter_Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Middleware_RateLimiter) GetRedis() *Middleware_RateLimiter_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

// Metrics
type Middleware_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Add a list of supported metrics for enabling or disabling specific metrics
	SupportedMetrics []string `protobuf:"bytes,5,rep,name=supported_metrics,proto3" json:"supported_metrics,omitempty"`
	// Repeated field for user-defined metrics
	UserMetrics []*UserMetric `protobuf:"bytes,6,rep,name=user_metrics,proto3" json:"user_metrics,omitempty"`
}

func (x *Middleware_Metrics) Reset() {
	*x = Middleware_Metrics{}
	mi := &file_config_v1_middleware_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Middleware_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_Metrics) ProtoMessage() {}

func (x *Middleware_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_Metrics.ProtoReflect.Descriptor instead.
func (*Middleware_Metrics) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Middleware_Metrics) GetSupportedMetrics() []string {
	if x != nil {
		return x.SupportedMetrics
	}
	return nil
}

func (x *Middleware_Metrics) GetUserMetrics() []*UserMetric {
	if x != nil {
		return x.UserMetrics
	}
	return nil
}

// Metadata
type Middleware_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Metadata data
	Data map[string]string `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Middleware_Metadata) Reset() {
	*x = Middleware_Metadata{}
	mi := &file_config_v1_middleware_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Middleware_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_Metadata) ProtoMessage() {}

func (x *Middleware_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_Metadata.ProtoReflect.Descriptor instead.
func (*Middleware_Metadata) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Middleware_Metadata) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Middleware_Metadata) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type Middleware_Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	FailFast bool  `protobuf:"varint,2,opt,name=fail_fast,proto3" json:"fail_fast,omitempty"`
}

func (x *Middleware_Validator) Reset() {
	*x = Middleware_Validator{}
	mi := &file_config_v1_middleware_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Middleware_Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_Validator) ProtoMessage() {}

func (x *Middleware_Validator) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_Validator.ProtoReflect.Descriptor instead.
func (*Middleware_Validator) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Middleware_Validator) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Middleware_Validator) GetFailFast() bool {
	if x != nil {
		return x.FailFast
	}
	return false
}

type Middleware_RateLimiter_Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Db       int64  `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`
}

func (x *Middleware_RateLimiter_Redis) Reset() {
	*x = Middleware_RateLimiter_Redis{}
	mi := &file_config_v1_middleware_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Middleware_RateLimiter_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_RateLimiter_Redis) ProtoMessage() {}

func (x *Middleware_RateLimiter_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_RateLimiter_Redis.ProtoReflect.Descriptor instead.
func (*Middleware_RateLimiter_Redis) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *Middleware_RateLimiter_Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Middleware_RateLimiter_Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Middleware_RateLimiter_Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Middleware_RateLimiter_Redis) GetDb() int64 {
	if x != nil {
		return x.Db
	}
	return 0
}

type Middleware_RateLimiter_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration      *durationpb.Duration `protobuf:"bytes,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	CleanupInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=cleanup_interval,proto3" json:"cleanup_interval,omitempty"`
}

func (x *Middleware_RateLimiter_Memory) Reset() {
	*x = Middleware_RateLimiter_Memory{}
	mi := &file_config_v1_middleware_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Middleware_RateLimiter_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_RateLimiter_Memory) ProtoMessage() {}

func (x *Middleware_RateLimiter_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_middleware_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_RateLimiter_Memory.ProtoReflect.Descriptor instead.
func (*Middleware_RateLimiter_Memory) Descriptor() ([]byte, []int) {
	return file_config_v1_middleware_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *Middleware_RateLimiter_Memory) GetExpiration() *durationpb.Duration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *Middleware_RateLimiter_Memory) GetCleanupInterval() *durationpb.Duration {
	if x != nil {
		return x.CleanupInterval
	}
	return nil
}

var File_config_v1_middleware_proto protoreflect.FileDescriptor

var file_config_v1_middleware_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x04, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x03, 0x22, 0xa4, 0x03, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x4a, 0x57, 0x54, 0x52, 0x03,
	0x6a, 0x77, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x52,
	0x06, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x1a, 0x4a, 0x0a, 0x06, 0x43, 0x61, 0x73, 0x62, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x12,
	0x3d, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xe6,
	0x0b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xfb, 0x04, 0x0a, 0x0b, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x48, 0x16, 0x72, 0x14, 0x52, 0x03,
	0x62, 0x62, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x78,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x05,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x1a, 0x63, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x64, 0x62, 0x1a, 0x8a, 0x01, 0x0a, 0x06, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x72, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x39, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x10, 0x03, 0x20, 0x00,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x69,
	0x6c, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x42, 0xa9, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0xf8, 0x01, 0x01,
	0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_v1_middleware_proto_rawDescOnce sync.Once
	file_config_v1_middleware_proto_rawDescData = file_config_v1_middleware_proto_rawDesc
)

func file_config_v1_middleware_proto_rawDescGZIP() []byte {
	file_config_v1_middleware_proto_rawDescOnce.Do(func() {
		file_config_v1_middleware_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_v1_middleware_proto_rawDescData)
	})
	return file_config_v1_middleware_proto_rawDescData
}

var file_config_v1_middleware_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_config_v1_middleware_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_config_v1_middleware_proto_goTypes = []any{
	(UserMetric_MetricType)(0),            // 0: config.v1.UserMetric.MetricType
	(*UserMetric)(nil),                    // 1: config.v1.UserMetric
	(*Security)(nil),                      // 2: config.v1.Security
	(*Middleware)(nil),                    // 3: config.v1.Middleware
	nil,                                   // 4: config.v1.UserMetric.LabelsEntry
	nil,                                   // 5: config.v1.UserMetric.MetadataEntry
	(*Security_Casbin)(nil),               // 6: config.v1.Security.Casbin
	(*Security_JWT)(nil),                  // 7: config.v1.Security.JWT
	(*Middleware_RateLimiter)(nil),        // 8: config.v1.Middleware.RateLimiter
	(*Middleware_Metrics)(nil),            // 9: config.v1.Middleware.Metrics
	(*Middleware_Metadata)(nil),           // 10: config.v1.Middleware.Metadata
	(*Middleware_Validator)(nil),          // 11: config.v1.Middleware.Validator
	(*Middleware_RateLimiter_Redis)(nil),  // 12: config.v1.Middleware.RateLimiter.Redis
	(*Middleware_RateLimiter_Memory)(nil), // 13: config.v1.Middleware.RateLimiter.Memory
	nil,                                   // 14: config.v1.Middleware.Metadata.DataEntry
	(*durationpb.Duration)(nil),           // 15: google.protobuf.Duration
}
var file_config_v1_middleware_proto_depIdxs = []int32{
	4,  // 0: config.v1.UserMetric.labels:type_name -> config.v1.UserMetric.LabelsEntry
	0,  // 1: config.v1.UserMetric.type:type_name -> config.v1.UserMetric.MetricType
	5,  // 2: config.v1.UserMetric.metadata:type_name -> config.v1.UserMetric.MetadataEntry
	7,  // 3: config.v1.Security.jwt:type_name -> config.v1.Security.JWT
	6,  // 4: config.v1.Security.casbin:type_name -> config.v1.Security.Casbin
	8,  // 5: config.v1.Middleware.rate_limiter:type_name -> config.v1.Middleware.RateLimiter
	10, // 6: config.v1.Middleware.metadata:type_name -> config.v1.Middleware.Metadata
	9,  // 7: config.v1.Middleware.metrics:type_name -> config.v1.Middleware.Metrics
	11, // 8: config.v1.Middleware.validator:type_name -> config.v1.Middleware.Validator
	15, // 9: config.v1.Security.JWT.expired_time:type_name -> google.protobuf.Duration
	13, // 10: config.v1.Middleware.RateLimiter.memory:type_name -> config.v1.Middleware.RateLimiter.Memory
	12, // 11: config.v1.Middleware.RateLimiter.redis:type_name -> config.v1.Middleware.RateLimiter.Redis
	1,  // 12: config.v1.Middleware.Metrics.user_metrics:type_name -> config.v1.UserMetric
	14, // 13: config.v1.Middleware.Metadata.data:type_name -> config.v1.Middleware.Metadata.DataEntry
	15, // 14: config.v1.Middleware.RateLimiter.Memory.expiration:type_name -> google.protobuf.Duration
	15, // 15: config.v1.Middleware.RateLimiter.Memory.cleanup_interval:type_name -> google.protobuf.Duration
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_config_v1_middleware_proto_init() }
func file_config_v1_middleware_proto_init() {
	if File_config_v1_middleware_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_v1_middleware_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v1_middleware_proto_goTypes,
		DependencyIndexes: file_config_v1_middleware_proto_depIdxs,
		EnumInfos:         file_config_v1_middleware_proto_enumTypes,
		MessageInfos:      file_config_v1_middleware_proto_msgTypes,
	}.Build()
	File_config_v1_middleware_proto = out.File
	file_config_v1_middleware_proto_rawDesc = nil
	file_config_v1_middleware_proto_goTypes = nil
	file_config_v1_middleware_proto_depIdxs = nil
}
