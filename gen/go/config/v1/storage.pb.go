// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: config/v1/storage.proto

package configv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/google/gnostic/openapiv3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Migration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Path    string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Names   []string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Version string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Mode    string   `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *Migration) Reset() {
	*x = Migration{}
	mi := &file_config_v1_storage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Migration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Migration) ProtoMessage() {}

func (x *Migration) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Migration.ProtoReflect.Descriptor instead.
func (*Migration) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{0}
}

func (x *Migration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Migration) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Migration) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Migration) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Migration) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

// Database
type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Debugging
	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"`
	// Dialect name: mysql, postgresql, mongodb, sqlite......
	Dialect string `protobuf:"bytes,2,opt,name=dialect,proto3" json:"dialect,omitempty"`
	// Data source (DSN string)
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Data migration
	Migration *Migration `protobuf:"bytes,10,opt,name=migration,proto3" json:"migration,omitempty"`
	// Link tracking switch
	EnableTrace bool `protobuf:"varint,12,opt,name=enable_trace,proto3" json:"enable_trace,omitempty"`
	// Performance analysis switch
	EnableMetrics bool `protobuf:"varint,13,opt,name=enable_metrics,proto3" json:"enable_metrics,omitempty"`
	// Maximum number of free connections in the connection pool
	MaxIdleConnections int32 `protobuf:"varint,20,opt,name=max_idle_connections,proto3" json:"max_idle_connections,omitempty"`
	// Maximum number of open connections in the connection pool
	MaxOpenConnections int32 `protobuf:"varint,21,opt,name=max_open_connections,proto3" json:"max_open_connections,omitempty"`
	// Maximum length of time that the connection can be reused
	ConnectionMaxLifetime int64 `protobuf:"varint,22,opt,name=connection_max_lifetime,proto3" json:"connection_max_lifetime,omitempty"`
	// Maximum number of connections in the connection pool for reading
	ConnectionMaxIdleTime int64 `protobuf:"varint,23,opt,name=connection_max_idle_time,proto3" json:"connection_max_idle_time,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	mi := &file_config_v1_storage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{1}
}

func (x *Database) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Database) GetDialect() string {
	if x != nil {
		return x.Dialect
	}
	return ""
}

func (x *Database) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Database) GetMigration() *Migration {
	if x != nil {
		return x.Migration
	}
	return nil
}

func (x *Database) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

func (x *Database) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

func (x *Database) GetMaxIdleConnections() int32 {
	if x != nil {
		return x.MaxIdleConnections
	}
	return 0
}

func (x *Database) GetMaxOpenConnections() int32 {
	if x != nil {
		return x.MaxOpenConnections
	}
	return 0
}

func (x *Database) GetConnectionMaxLifetime() int64 {
	if x != nil {
		return x.ConnectionMaxLifetime
	}
	return 0
}

func (x *Database) GetConnectionMaxIdleTime() int64 {
	if x != nil {
		return x.ConnectionMaxIdleTime
	}
	return 0
}

// Redis
type Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network      string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr         string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Password     string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Db           int32  `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`
	DialTimeout  int64  `protobuf:"varint,5,opt,name=dial_timeout,proto3" json:"dial_timeout,omitempty"`
	ReadTimeout  int64  `protobuf:"varint,6,opt,name=read_timeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout int64  `protobuf:"varint,7,opt,name=write_timeout,proto3" json:"write_timeout,omitempty"`
}

func (x *Redis) Reset() {
	*x = Redis{}
	mi := &file_config_v1_storage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{2}
}

func (x *Redis) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Redis) GetDialTimeout() int64 {
	if x != nil {
		return x.DialTimeout
	}
	return 0
}

func (x *Redis) GetReadTimeout() int64 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

func (x *Redis) GetWriteTimeout() int64 {
	if x != nil {
		return x.WriteTimeout
	}
	return 0
}

// Memcached
type Memcached struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	MaxIdle  int32  `protobuf:"varint,4,opt,name=max_idle,proto3" json:"max_idle,omitempty"`
	Timeout  int64  `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Memcached) Reset() {
	*x = Memcached{}
	mi := &file_config_v1_storage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Memcached) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memcached) ProtoMessage() {}

func (x *Memcached) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memcached.ProtoReflect.Descriptor instead.
func (*Memcached) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{3}
}

func (x *Memcached) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Memcached) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Memcached) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Memcached) GetMaxIdle() int32 {
	if x != nil {
		return x.MaxIdle
	}
	return 0
}

func (x *Memcached) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// Memory
type Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size            int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Capacity        int32 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Expiration      int64 `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	CleanupInterval int64 `protobuf:"varint,4,opt,name=cleanup_interval,proto3" json:"cleanup_interval,omitempty"`
}

func (x *Memory) Reset() {
	*x = Memory{}
	mi := &file_config_v1_storage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{4}
}

func (x *Memory) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Memory) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Memory) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *Memory) GetCleanupInterval() int64 {
	if x != nil {
		return x.CleanupInterval
	}
	return 0
}

type BadgerDS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path             string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	SyncWrites       bool   `protobuf:"varint,2,opt,name=sync_writes,proto3" json:"sync_writes,omitempty"`
	ValueLogFileSize int32  `protobuf:"varint,3,opt,name=value_log_file_size,proto3" json:"value_log_file_size,omitempty"`
	InMemory         bool   `protobuf:"varint,4,opt,name=in_memory,proto3" json:"in_memory,omitempty"`
	LogLevel         uint32 `protobuf:"varint,5,opt,name=log_level,proto3" json:"log_level,omitempty"`
}

func (x *BadgerDS) Reset() {
	*x = BadgerDS{}
	mi := &file_config_v1_storage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadgerDS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgerDS) ProtoMessage() {}

func (x *BadgerDS) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgerDS.ProtoReflect.Descriptor instead.
func (*BadgerDS) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{5}
}

func (x *BadgerDS) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *BadgerDS) GetSyncWrites() bool {
	if x != nil {
		return x.SyncWrites
	}
	return false
}

func (x *BadgerDS) GetValueLogFileSize() int32 {
	if x != nil {
		return x.ValueLogFileSize
	}
	return 0
}

func (x *BadgerDS) GetInMemory() bool {
	if x != nil {
		return x.InMemory
	}
	return false
}

func (x *BadgerDS) GetLogLevel() uint32 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

// File
type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_config_v1_storage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{6}
}

func (x *File) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

// OSS
type Oss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint        string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKeyId     string `protobuf:"bytes,2,opt,name=access_key_id,proto3" json:"access_key_id,omitempty"`
	AccessKeySecret string `protobuf:"bytes,3,opt,name=access_key_secret,proto3" json:"access_key_secret,omitempty"`
	Bucket          string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region          string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Ssl             bool   `protobuf:"varint,6,opt,name=ssl,proto3" json:"ssl,omitempty"`
	ConnectTimeout  int64  `protobuf:"varint,7,opt,name=connect_timeout,proto3" json:"connect_timeout,omitempty"`
	ReadTimeout     int64  `protobuf:"varint,8,opt,name=read_timeout,proto3" json:"read_timeout,omitempty"`
}

func (x *Oss) Reset() {
	*x = Oss{}
	mi := &file_config_v1_storage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Oss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oss) ProtoMessage() {}

func (x *Oss) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oss.ProtoReflect.Descriptor instead.
func (*Oss) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{7}
}

func (x *Oss) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Oss) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *Oss) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *Oss) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Oss) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Oss) GetSsl() bool {
	if x != nil {
		return x.Ssl
	}
	return false
}

func (x *Oss) GetConnectTimeout() int64 {
	if x != nil {
		return x.ConnectTimeout
	}
	return 0
}

func (x *Oss) GetReadTimeout() int64 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

// Mongo
type Mongo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri            string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Database       string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Username       string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password       string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	AuthSource     bool   `protobuf:"varint,5,opt,name=auth_source,proto3" json:"auth_source,omitempty"`
	MaxPoolSize    int32  `protobuf:"varint,6,opt,name=max_pool_size,proto3" json:"max_pool_size,omitempty"`
	MinPoolSize    int32  `protobuf:"varint,7,opt,name=min_pool_size,proto3" json:"min_pool_size,omitempty"`
	ConnectTimeout int64  `protobuf:"varint,8,opt,name=connect_timeout,proto3" json:"connect_timeout,omitempty"`
}

func (x *Mongo) Reset() {
	*x = Mongo{}
	mi := &file_config_v1_storage_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mongo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mongo) ProtoMessage() {}

func (x *Mongo) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mongo.ProtoReflect.Descriptor instead.
func (*Mongo) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{8}
}

func (x *Mongo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Mongo) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Mongo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Mongo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Mongo) GetAuthSource() bool {
	if x != nil {
		return x.AuthSource
	}
	return false
}

func (x *Mongo) GetMaxPoolSize() int32 {
	if x != nil {
		return x.MaxPoolSize
	}
	return 0
}

func (x *Mongo) GetMinPoolSize() int32 {
	if x != nil {
		return x.MinPoolSize
	}
	return 0
}

func (x *Mongo) GetConnectTimeout() int64 {
	if x != nil {
		return x.ConnectTimeout
	}
	return 0
}

// Cache
type Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Driver name: redis, memcached, etc.
	Driver string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Memcached
	Memcached *Memcached `protobuf:"bytes,10,opt,name=memcached,proto3" json:"memcached,omitempty"`
	// Memory cache
	Memory *Memory `protobuf:"bytes,11,opt,name=memory,proto3" json:"memory,omitempty"`
	// Redis
	Redis *Redis `protobuf:"bytes,12,opt,name=redis,proto3" json:"redis,omitempty"`
	// Badger
	Badger *BadgerDS `protobuf:"bytes,13,opt,name=badger,proto3" json:"badger,omitempty"`
}

func (x *Cache) Reset() {
	*x = Cache{}
	mi := &file_config_v1_storage_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cache) ProtoMessage() {}

func (x *Cache) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cache.ProtoReflect.Descriptor instead.
func (*Cache) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{9}
}

func (x *Cache) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Cache) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cache) GetMemcached() *Memcached {
	if x != nil {
		return x.Memcached
	}
	return nil
}

func (x *Cache) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Cache) GetRedis() *Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Cache) GetBadger() *BadgerDS {
	if x != nil {
		return x.Badger
	}
	return nil
}

type Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Database
	Database *Database `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Cache
	Cache *Cache `protobuf:"bytes,4,opt,name=cache,proto3" json:"cache,omitempty"`
	// File
	File *File `protobuf:"bytes,10,opt,name=file,proto3" json:"file,omitempty"`
	// Redis
	Redis *Redis `protobuf:"bytes,11,opt,name=redis,proto3" json:"redis,omitempty"`
	// Badger
	Badger *BadgerDS `protobuf:"bytes,12,opt,name=badger,proto3" json:"badger,omitempty"`
	// Mongo
	Mongo *Mongo `protobuf:"bytes,13,opt,name=mongo,proto3" json:"mongo,omitempty"`
	// OSS
	Oss *Oss `protobuf:"bytes,14,opt,name=oss,proto3" json:"oss,omitempty"`
}

func (x *Storage) Reset() {
	*x = Storage{}
	mi := &file_config_v1_storage_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{10}
}

func (x *Storage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Storage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Storage) GetDatabase() *Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Storage) GetCache() *Cache {
	if x != nil {
		return x.Cache
	}
	return nil
}

func (x *Storage) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Storage) GetRedis() *Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Storage) GetBadger() *BadgerDS {
	if x != nil {
		return x.Badger
	}
	return nil
}

func (x *Storage) GetMongo() *Mongo {
	if x != nil {
		return x.Mongo
	}
	return nil
}

func (x *Storage) GetOss() *Oss {
	if x != nil {
		return x.Oss
	}
	return nil
}

var File_config_v1_storage_proto protoreflect.FileDescriptor

var file_config_v1_storage_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x09, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x21, 0xba, 0x47, 0x1e, 0x92, 0x02, 0x1b, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xba, 0x47,
	0x11, 0x92, 0x02, 0x0e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61,
	0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14, 0xba, 0x47, 0x11, 0x92, 0x02, 0x0e, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x47, 0x14, 0x92, 0x02, 0x11, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xba, 0x47, 0x11, 0x92, 0x02, 0x0e, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0xc5, 0x07, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23, 0xba,
	0x47, 0x20, 0x92, 0x02, 0x1d, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x20, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x64, 0x69,
	0x61, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x66, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x52, 0x05, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x52, 0x07, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x52, 0x06, 0x73, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x06, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x07, 0x73, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x33, 0xba, 0x47, 0x17, 0x92, 0x02, 0x14, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x20, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47,
	0x19, 0x92, 0x02, 0x16, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x64, 0x73, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0xba, 0x47, 0x11,
	0x92, 0x02, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x1a, 0xba, 0x47, 0x17, 0x92, 0x02, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x0c,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x21, 0xba, 0x47, 0x1e, 0x92, 0x02, 0x1b, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x77, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x42, 0x43, 0xba, 0x47, 0x40, 0x92, 0x02, 0x3d, 0x54, 0x68, 0x65,
	0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x77, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x42, 0x43,
	0xba, 0x47, 0x40, 0x92, 0x02, 0x3d, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x70, 0x65, 0x6e,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,
	0x6f, 0x6f, 0x6c, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x42, 0x3b, 0xba, 0x47, 0x38, 0x92,
	0x02, 0x35, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x4a, 0xba, 0x47, 0x47, 0x92, 0x02, 0x44, 0x54, 0x68, 0x65, 0x20, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,
	0x6f, 0x6f, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x05, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xba, 0x47, 0x0a, 0x92, 0x02, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x47, 0x09, 0x92, 0x02, 0x06, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xba, 0x47, 0x11, 0x92,
	0x02, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x02, 0x64, 0x62, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x28, 0x00, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x28, 0x00, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1a, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x28, 0x00, 0xba, 0x47, 0x10, 0x92, 0x02, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xba, 0x47, 0x0a, 0x92, 0x02, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0x47, 0x0b, 0x92, 0x02, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x47, 0x09, 0x92, 0x02, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x31, 0xba,
	0x47, 0x2e, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x92, 0x02, 0x22, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x64, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x15, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x28, 0x00, 0xba, 0x47, 0x0b, 0x92, 0x02, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x06,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xba, 0x47, 0x07, 0x92, 0x02, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba, 0x47, 0x0b, 0x92, 0x02, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x15, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x10, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0xa7, 0x02, 0x0a, 0x08, 0x42, 0x61, 0x64, 0x67, 0x65, 0x72, 0x44, 0x53, 0x12, 0x1e, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x47, 0x07, 0x92,
	0x02, 0x04, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0b,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x6f, 0x75, 0x73, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f,
	0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0xba, 0x47, 0x16,
	0x92, 0x02, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69,
	0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16,
	0xba, 0x47, 0x13, 0x92, 0x02, 0x10, 0x69, 0x6e, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x20,
	0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x36, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x03, 0x28, 0x00, 0xba,
	0x47, 0x0c, 0x92, 0x02, 0x09, 0x6c, 0x6f, 0x67, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x30, 0x0a, 0x04, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xba, 0x47, 0x11, 0x92, 0x02, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x20, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x81, 0x03, 0x0a, 0x03,
	0x4f, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x73, 0x73, 0x6c, 0x12, 0x59, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2f,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0xba, 0x47, 0x25, 0x92, 0x02, 0x22, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x29, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0xba,
	0x47, 0x1f, 0x92, 0x02, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0xe9, 0x02, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0x92, 0x02, 0x16, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x44, 0x42, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x55, 0x52, 0x49, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x47, 0x10,
	0x92, 0x02, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x59, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2f, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x28, 0x00, 0xba, 0x47, 0x25, 0x92, 0x02, 0x22, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xc3, 0x03, 0x0a, 0x05,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x52, 0x04, 0x6e, 0x6f,
	0x6e, 0x65, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0xba, 0x47, 0x14, 0x92,
	0x02, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x47, 0x0d, 0x92, 0x02,
	0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x57, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x23, 0xba, 0x47, 0x20, 0x92,
	0x02, 0x1d, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x20, 0xba,
	0x47, 0x1d, 0x92, 0x02, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x20, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0x92, 0x02, 0x19,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x12, 0x4f, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x72, 0x44, 0x53, 0x42, 0x22, 0xba, 0x47, 0x1f, 0x92, 0x02, 0x1c, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x72, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x72, 0x22, 0xbb, 0x05, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0xba, 0x47, 0x32, 0x92, 0x02, 0x2f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0xfa,
	0x42, 0x32, 0x72, 0x30, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x52, 0x03,
	0x6f, 0x73, 0x73, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x42, 0x1c, 0xba, 0x47, 0x19, 0x92, 0x02, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x19, 0xba, 0x47,
	0x16, 0x92, 0x02, 0x13, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x45,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x20, 0xba,
	0x47, 0x1d, 0x92, 0x02, 0x1a, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x42, 0x21, 0xba, 0x47, 0x1e, 0x92, 0x02, 0x1b, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x12, 0x4f, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x72, 0x44, 0x53, 0x42, 0x22, 0xba, 0x47, 0x1f, 0x92, 0x02, 0x1c, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x72, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x42, 0x21, 0xba, 0x47, 0x1e, 0x92, 0x02, 0x1b, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x20,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x41, 0x0a, 0x03,
	0x6f, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x73, 0x73, 0x42, 0x1f, 0xba, 0x47, 0x1c, 0x92, 0x02,
	0x19, 0x6f, 0x73, 0x73, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x73, 0x73, 0x42,
	0x9d, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x42, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72,
	0x69, 0x67, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x43,
	0x58, 0x58, 0xaa, 0x02, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_v1_storage_proto_rawDescOnce sync.Once
	file_config_v1_storage_proto_rawDescData = file_config_v1_storage_proto_rawDesc
)

func file_config_v1_storage_proto_rawDescGZIP() []byte {
	file_config_v1_storage_proto_rawDescOnce.Do(func() {
		file_config_v1_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_v1_storage_proto_rawDescData)
	})
	return file_config_v1_storage_proto_rawDescData
}

var file_config_v1_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_config_v1_storage_proto_goTypes = []any{
	(*Migration)(nil), // 0: config.v1.Migration
	(*Database)(nil),  // 1: config.v1.Database
	(*Redis)(nil),     // 2: config.v1.Redis
	(*Memcached)(nil), // 3: config.v1.Memcached
	(*Memory)(nil),    // 4: config.v1.Memory
	(*BadgerDS)(nil),  // 5: config.v1.BadgerDS
	(*File)(nil),      // 6: config.v1.File
	(*Oss)(nil),       // 7: config.v1.Oss
	(*Mongo)(nil),     // 8: config.v1.Mongo
	(*Cache)(nil),     // 9: config.v1.Cache
	(*Storage)(nil),   // 10: config.v1.Storage
}
var file_config_v1_storage_proto_depIdxs = []int32{
	0,  // 0: config.v1.Database.migration:type_name -> config.v1.Migration
	3,  // 1: config.v1.Cache.memcached:type_name -> config.v1.Memcached
	4,  // 2: config.v1.Cache.memory:type_name -> config.v1.Memory
	2,  // 3: config.v1.Cache.redis:type_name -> config.v1.Redis
	5,  // 4: config.v1.Cache.badger:type_name -> config.v1.BadgerDS
	1,  // 5: config.v1.Storage.database:type_name -> config.v1.Database
	9,  // 6: config.v1.Storage.cache:type_name -> config.v1.Cache
	6,  // 7: config.v1.Storage.file:type_name -> config.v1.File
	2,  // 8: config.v1.Storage.redis:type_name -> config.v1.Redis
	5,  // 9: config.v1.Storage.badger:type_name -> config.v1.BadgerDS
	8,  // 10: config.v1.Storage.mongo:type_name -> config.v1.Mongo
	7,  // 11: config.v1.Storage.oss:type_name -> config.v1.Oss
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_config_v1_storage_proto_init() }
func file_config_v1_storage_proto_init() {
	if File_config_v1_storage_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_v1_storage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v1_storage_proto_goTypes,
		DependencyIndexes: file_config_v1_storage_proto_depIdxs,
		MessageInfos:      file_config_v1_storage_proto_msgTypes,
	}.Build()
	File_config_v1_storage_proto = out.File
	file_config_v1_storage_proto_rawDesc = nil
	file_config_v1_storage_proto_goTypes = nil
	file_config_v1_storage_proto_depIdxs = nil
}
