// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/v1/middleware.proto

package configv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserMetric with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserMetricMultiError, or
// nil if none found.
func (m *UserMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *UserMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for Labels

	// no validation rules for Unit

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for Context

	// no validation rules for Metadata

	if len(errors) > 0 {
		return UserMetricMultiError(errors)
	}

	return nil
}

// UserMetricMultiError is an error wrapping multiple validation errors
// returned by UserMetric.ValidateAll() if the designated constraints aren't met.
type UserMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMetricMultiError) AllErrors() []error { return m }

// UserMetricValidationError is the validation error returned by
// UserMetric.Validate if the designated constraints aren't met.
type UserMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserMetricValidationError) ErrorName() string { return "UserMetricValidationError" }

// Error satisfies the builtin error interface
func (e UserMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserMetricValidationError{}

// Validate checks the field values on Security with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Security) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Security with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecurityMultiError, or nil
// if none found.
func (m *Security) ValidateAll() error {
	return m.validate(true)
}

func (m *Security) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityValidationError{
				field:  "Jwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCasbin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "Casbin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "Casbin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCasbin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityValidationError{
				field:  "Casbin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SecurityMultiError(errors)
	}

	return nil
}

// SecurityMultiError is an error wrapping multiple validation errors returned
// by Security.ValidateAll() if the designated constraints aren't met.
type SecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityMultiError) AllErrors() []error { return m }

// SecurityValidationError is the validation error returned by
// Security.Validate if the designated constraints aren't met.
type SecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityValidationError) ErrorName() string { return "SecurityValidationError" }

// Error satisfies the builtin error interface
func (e SecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityValidationError{}

// Validate checks the field values on Middleware with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Middleware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Middleware with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MiddlewareMultiError, or
// nil if none found.
func (m *Middleware) ValidateAll() error {
	return m.validate(true)
}

func (m *Middleware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnableLogging

	// no validation rules for EnableRecovery

	// no validation rules for EnableTracing

	// no validation rules for EnableValidate

	// no validation rules for EnableCircuitBreaker

	// no validation rules for EnableMetadata

	if all {
		switch v := interface{}(m.GetRateLimiter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "RateLimiter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "RateLimiter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimiter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareValidationError{
				field:  "RateLimiter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetrics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetrics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareValidationError{
				field:  "Metrics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "Validator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareValidationError{
					field:  "Validator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareValidationError{
				field:  "Validator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MiddlewareMultiError(errors)
	}

	return nil
}

// MiddlewareMultiError is an error wrapping multiple validation errors
// returned by Middleware.ValidateAll() if the designated constraints aren't met.
type MiddlewareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareMultiError) AllErrors() []error { return m }

// MiddlewareValidationError is the validation error returned by
// Middleware.Validate if the designated constraints aren't met.
type MiddlewareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareValidationError) ErrorName() string { return "MiddlewareValidationError" }

// Error satisfies the builtin error interface
func (e MiddlewareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddleware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareValidationError{}

// Validate checks the field values on Security_Casbin with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Security_Casbin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Security_Casbin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Security_CasbinMultiError, or nil if none found.
func (m *Security_Casbin) ValidateAll() error {
	return m.validate(true)
}

func (m *Security_Casbin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyFile

	// no validation rules for ModelFile

	if len(errors) > 0 {
		return Security_CasbinMultiError(errors)
	}

	return nil
}

// Security_CasbinMultiError is an error wrapping multiple validation errors
// returned by Security_Casbin.ValidateAll() if the designated constraints
// aren't met.
type Security_CasbinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Security_CasbinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Security_CasbinMultiError) AllErrors() []error { return m }

// Security_CasbinValidationError is the validation error returned by
// Security_Casbin.Validate if the designated constraints aren't met.
type Security_CasbinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Security_CasbinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Security_CasbinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Security_CasbinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Security_CasbinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Security_CasbinValidationError) ErrorName() string { return "Security_CasbinValidationError" }

// Error satisfies the builtin error interface
func (e Security_CasbinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurity_Casbin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Security_CasbinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Security_CasbinValidationError{}

// Validate checks the field values on Security_JWT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Security_JWT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Security_JWT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Security_JWTMultiError, or
// nil if none found.
func (m *Security_JWT) ValidateAll() error {
	return m.validate(true)
}

func (m *Security_JWT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SigningMethod

	// no validation rules for SigningKey

	// no validation rules for OldSigningKey

	if all {
		switch v := interface{}(m.GetExpiredTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Security_JWTValidationError{
					field:  "ExpiredTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Security_JWTValidationError{
					field:  "ExpiredTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Security_JWTValidationError{
				field:  "ExpiredTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Security_JWTMultiError(errors)
	}

	return nil
}

// Security_JWTMultiError is an error wrapping multiple validation errors
// returned by Security_JWT.ValidateAll() if the designated constraints aren't met.
type Security_JWTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Security_JWTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Security_JWTMultiError) AllErrors() []error { return m }

// Security_JWTValidationError is the validation error returned by
// Security_JWT.Validate if the designated constraints aren't met.
type Security_JWTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Security_JWTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Security_JWTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Security_JWTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Security_JWTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Security_JWTValidationError) ErrorName() string { return "Security_JWTValidationError" }

// Error satisfies the builtin error interface
func (e Security_JWTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurity_JWT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Security_JWTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Security_JWTValidationError{}

// Validate checks the field values on Middleware_RateLimiter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Middleware_RateLimiter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Middleware_RateLimiter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Middleware_RateLimiterMultiError, or nil if none found.
func (m *Middleware_RateLimiter) ValidateAll() error {
	return m.validate(true)
}

func (m *Middleware_RateLimiter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Period

	// no validation rules for XRatelimitLimit

	// no validation rules for XRatelimitRemaining

	// no validation rules for XRatelimitReset

	// no validation rules for RetryAfter

	if all {
		switch v := interface{}(m.GetMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Middleware_RateLimiterValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Middleware_RateLimiterValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Middleware_RateLimiterValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRedis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Middleware_RateLimiterValidationError{
					field:  "Redis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Middleware_RateLimiterValidationError{
					field:  "Redis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRedis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Middleware_RateLimiterValidationError{
				field:  "Redis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Middleware_RateLimiterMultiError(errors)
	}

	return nil
}

// Middleware_RateLimiterMultiError is an error wrapping multiple validation
// errors returned by Middleware_RateLimiter.ValidateAll() if the designated
// constraints aren't met.
type Middleware_RateLimiterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Middleware_RateLimiterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Middleware_RateLimiterMultiError) AllErrors() []error { return m }

// Middleware_RateLimiterValidationError is the validation error returned by
// Middleware_RateLimiter.Validate if the designated constraints aren't met.
type Middleware_RateLimiterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Middleware_RateLimiterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Middleware_RateLimiterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Middleware_RateLimiterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Middleware_RateLimiterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Middleware_RateLimiterValidationError) ErrorName() string {
	return "Middleware_RateLimiterValidationError"
}

// Error satisfies the builtin error interface
func (e Middleware_RateLimiterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddleware_RateLimiter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Middleware_RateLimiterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Middleware_RateLimiterValidationError{}

// Validate checks the field values on Middleware_Metrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Middleware_Metrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Middleware_Metrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Middleware_MetricsMultiError, or nil if none found.
func (m *Middleware_Metrics) ValidateAll() error {
	return m.validate(true)
}

func (m *Middleware_Metrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Middleware_MetricsValidationError{
						field:  fmt.Sprintf("UserMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Middleware_MetricsValidationError{
						field:  fmt.Sprintf("UserMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Middleware_MetricsValidationError{
					field:  fmt.Sprintf("UserMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Middleware_MetricsMultiError(errors)
	}

	return nil
}

// Middleware_MetricsMultiError is an error wrapping multiple validation errors
// returned by Middleware_Metrics.ValidateAll() if the designated constraints
// aren't met.
type Middleware_MetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Middleware_MetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Middleware_MetricsMultiError) AllErrors() []error { return m }

// Middleware_MetricsValidationError is the validation error returned by
// Middleware_Metrics.Validate if the designated constraints aren't met.
type Middleware_MetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Middleware_MetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Middleware_MetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Middleware_MetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Middleware_MetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Middleware_MetricsValidationError) ErrorName() string {
	return "Middleware_MetricsValidationError"
}

// Error satisfies the builtin error interface
func (e Middleware_MetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddleware_Metrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Middleware_MetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Middleware_MetricsValidationError{}

// Validate checks the field values on Middleware_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Middleware_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Middleware_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Middleware_MetadataMultiError, or nil if none found.
func (m *Middleware_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Middleware_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	// no validation rules for Data

	if len(errors) > 0 {
		return Middleware_MetadataMultiError(errors)
	}

	return nil
}

// Middleware_MetadataMultiError is an error wrapping multiple validation
// errors returned by Middleware_Metadata.ValidateAll() if the designated
// constraints aren't met.
type Middleware_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Middleware_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Middleware_MetadataMultiError) AllErrors() []error { return m }

// Middleware_MetadataValidationError is the validation error returned by
// Middleware_Metadata.Validate if the designated constraints aren't met.
type Middleware_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Middleware_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Middleware_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Middleware_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Middleware_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Middleware_MetadataValidationError) ErrorName() string {
	return "Middleware_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e Middleware_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddleware_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Middleware_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Middleware_MetadataValidationError{}

// Validate checks the field values on Middleware_Validator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Middleware_Validator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Middleware_Validator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Middleware_ValidatorMultiError, or nil if none found.
func (m *Middleware_Validator) ValidateAll() error {
	return m.validate(true)
}

func (m *Middleware_Validator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for FailFast

	if len(errors) > 0 {
		return Middleware_ValidatorMultiError(errors)
	}

	return nil
}

// Middleware_ValidatorMultiError is an error wrapping multiple validation
// errors returned by Middleware_Validator.ValidateAll() if the designated
// constraints aren't met.
type Middleware_ValidatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Middleware_ValidatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Middleware_ValidatorMultiError) AllErrors() []error { return m }

// Middleware_ValidatorValidationError is the validation error returned by
// Middleware_Validator.Validate if the designated constraints aren't met.
type Middleware_ValidatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Middleware_ValidatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Middleware_ValidatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Middleware_ValidatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Middleware_ValidatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Middleware_ValidatorValidationError) ErrorName() string {
	return "Middleware_ValidatorValidationError"
}

// Error satisfies the builtin error interface
func (e Middleware_ValidatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddleware_Validator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Middleware_ValidatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Middleware_ValidatorValidationError{}

// Validate checks the field values on Middleware_RateLimiter_Redis with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Middleware_RateLimiter_Redis) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Middleware_RateLimiter_Redis with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Middleware_RateLimiter_RedisMultiError, or nil if none found.
func (m *Middleware_RateLimiter_Redis) ValidateAll() error {
	return m.validate(true)
}

func (m *Middleware_RateLimiter_Redis) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Addr

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Db

	if len(errors) > 0 {
		return Middleware_RateLimiter_RedisMultiError(errors)
	}

	return nil
}

// Middleware_RateLimiter_RedisMultiError is an error wrapping multiple
// validation errors returned by Middleware_RateLimiter_Redis.ValidateAll() if
// the designated constraints aren't met.
type Middleware_RateLimiter_RedisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Middleware_RateLimiter_RedisMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Middleware_RateLimiter_RedisMultiError) AllErrors() []error { return m }

// Middleware_RateLimiter_RedisValidationError is the validation error returned
// by Middleware_RateLimiter_Redis.Validate if the designated constraints
// aren't met.
type Middleware_RateLimiter_RedisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Middleware_RateLimiter_RedisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Middleware_RateLimiter_RedisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Middleware_RateLimiter_RedisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Middleware_RateLimiter_RedisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Middleware_RateLimiter_RedisValidationError) ErrorName() string {
	return "Middleware_RateLimiter_RedisValidationError"
}

// Error satisfies the builtin error interface
func (e Middleware_RateLimiter_RedisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddleware_RateLimiter_Redis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Middleware_RateLimiter_RedisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Middleware_RateLimiter_RedisValidationError{}

// Validate checks the field values on Middleware_RateLimiter_Memory with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Middleware_RateLimiter_Memory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Middleware_RateLimiter_Memory with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Middleware_RateLimiter_MemoryMultiError, or nil if none found.
func (m *Middleware_RateLimiter_Memory) ValidateAll() error {
	return m.validate(true)
}

func (m *Middleware_RateLimiter_Memory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Middleware_RateLimiter_MemoryValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Middleware_RateLimiter_MemoryValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Middleware_RateLimiter_MemoryValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCleanupInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Middleware_RateLimiter_MemoryValidationError{
					field:  "CleanupInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Middleware_RateLimiter_MemoryValidationError{
					field:  "CleanupInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCleanupInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Middleware_RateLimiter_MemoryValidationError{
				field:  "CleanupInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Middleware_RateLimiter_MemoryMultiError(errors)
	}

	return nil
}

// Middleware_RateLimiter_MemoryMultiError is an error wrapping multiple
// validation errors returned by Middleware_RateLimiter_Memory.ValidateAll()
// if the designated constraints aren't met.
type Middleware_RateLimiter_MemoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Middleware_RateLimiter_MemoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Middleware_RateLimiter_MemoryMultiError) AllErrors() []error { return m }

// Middleware_RateLimiter_MemoryValidationError is the validation error
// returned by Middleware_RateLimiter_Memory.Validate if the designated
// constraints aren't met.
type Middleware_RateLimiter_MemoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Middleware_RateLimiter_MemoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Middleware_RateLimiter_MemoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Middleware_RateLimiter_MemoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Middleware_RateLimiter_MemoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Middleware_RateLimiter_MemoryValidationError) ErrorName() string {
	return "Middleware_RateLimiter_MemoryValidationError"
}

// Error satisfies the builtin error interface
func (e Middleware_RateLimiter_MemoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddleware_RateLimiter_Memory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Middleware_RateLimiter_MemoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Middleware_RateLimiter_MemoryValidationError{}
