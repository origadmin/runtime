// API Gateway configuration
// This file defines the configuration structure for an API Gateway, including server and downstream client configurations
syntax = "proto3";

// Package name to prevent naming conflicts
package examples.api_gateway;

// Import server and client building block containers provided by the framework
import "runtime/config/v1/server.proto";
import "runtime/config/v1/client.proto";
// Import client configuration related to service discovery
import "runtime/discovery/v1/endpoint.proto";

// Specify the import path and package name for the generated Go code
option go_package = "./api_gateway/conf;conf";

// Bootstrap is the top-level configuration for an API Gateway
// This configuration initializes an API Gateway service that can provide multiple server interfaces
// and call multiple downstream microservices
message Bootstrap {
  // Server configuration list
  // Gateways typically expose multiple server interfaces, for example:
  // - HTTP RESTful API for external access
  // - gRPC interface
  // - WebSocket service
  repeated runtime.config.v1.Server servers = 1;

  // Downstream client configuration mapping
  // The key is the logical name of the client, used to reference specific clients in code
  // For example:
  // - "user-service-client"
  // - "order-service-client"
  map<string, ClientConfig> clients = 2; 
}

// ClientConfig combines all configurations needed for a client
// It includes both business-level and transport-level configurations
// It includes both business-level and transport-level configurations
message ClientConfig {
  // Business-level client configuration
  // Mainly configures how to discover and select service instances, for example:
  // - Service discovery method (direct, DNS, Consul, etc.)
  // - Load balancing strategy
  // - Circuit breaking and fallback configuration
  runtime.discovery.v1.Endpoint endpoint = 1;

  // Transport-level client configuration
// Mainly configures how to communicate with selected service instances, for example:
  // - Communication protocol (HTTP/gRPC)
  // - Timeout settings
  // - Retry policy
  // - TLS configuration
  runtime.config.v1.Client transport = 2;
}
