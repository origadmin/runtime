syntax = "proto3";

package examples.load_with_runtime;

import "runtime/discovery/v1/discovery.proto";
import "runtime/logger/v1/logger.proto";
import "runtime/config/v1/client.proto";
import "runtime/config/v1/server.proto";

option go_package = "./load_with_runtime/conf;conf";

// Bootstrap is the user-facing configuration structure.
// It uses references (like discovery_name) to link configurations.
message Bootstrap {
  // Server configurations (e.g., HTTP, gRPC servers)
  repeated runtime.config.v1.Server servers = 1;

  // Endpoints defines the configuration for all downstream services.
  // The key of the map is the logical name of the endpoint (e.g., "user-service").
  map<string, EndpointConfig> endpoints = 2;

  // Logging configuration
  runtime.logger.v1.Logger logger = 3;

  // RegistriesConfig holds the definitions of available discovery service providers.
  RegistriesConfig registries = 4;
}

// EndpointConfig represents the user-facing configuration for an endpoint.
// It uses a string reference (`discovery_name`) to link to a discovery provider.
message EndpointConfig {
  // The name of the discovery provider configuration (from registries.discoveries) to use.
  string discovery_name = 1 [json_name = "discovery_name"];

  // The endpoint URI to connect to, e.g., "discovery:///user-service".
  string uri = 2;

  // Selector for client-side load balancing and node filtering.
  Selector selector = 3;

  // Transport configuration for this client.
  runtime.config.v1.Client transport = 4;

  // We need to define Selector here as it was in the old client.proto/endpoint.proto
  message Selector {
    string type = 1;
    string version = 2;
  }
}

// RegistriesConfig holds the definitions of available discovery service providers.
message RegistriesConfig {
  map<string, runtime.discovery.v1.Discovery> discoveries = 1;
}
