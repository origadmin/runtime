// Configuration for a microservice with HTTP server and gRPC client
// This file defines the configuration for a microservice that provides an HTTP server interface and calls gRPC services
syntax = "proto3";

// Package name to prevent naming conflicts
package examples.http_server_grpc_client;

// Import server and client building block containers provided by the framework
import "transport/v1/server.proto"; // Updated import path
import "transport/v1/client.proto"; // Updated import path
// Import client configuration related to service discovery
import "discovery/v1/endpoint.proto"; // Updated import path

// Specify the import path and package name for the generated Go code
option go_package = "./http_server_grpc_client/conf;conf";

// Bootstrap is the top-level configuration for a microservice with HTTP server and gRPC client
// This architecture pattern is suitable for scenarios that need to provide RESTful APIs while calling other gRPC services
message Bootstrap {
  // Server configuration list
  // Typically, this would configure an HTTP server to provide APIs
  // For example:
  // - Port number
  // - Middleware configuration
  // - Timeout settings
  repeated transport.v1.Server servers = 1;

  // Downstream gRPC client configuration mapping
  // The key is the logical name of the client, used to reference specific clients in code
  // For example:
  // - "user-service-client"
  // - "order-service-client"
  map<string, ClientConfig> clients = 2; 
}

// ClientConfig combines all configurations needed for a gRPC client
// It includes service discovery and transport layer configurations
message ClientConfig {
  // Business-level client configuration
  // Mainly configures how to discover and select gRPC service instances, for example:
  // - Service discovery method (direct, DNS, Consul, etc.)
  // - Load balancing strategy
  // - Circuit breaking and fallback configuration
  discovery.v1.Endpoint endpoint = 1;

  // Transport-level client configuration
  // Mainly configures how to communicate with gRPC service instances, for example:
  // - Connection pool configuration
  // - Timeout settings
  // - Retry policy
  // - TLS configuration
  transport.v1.Client transport = 2;
}
